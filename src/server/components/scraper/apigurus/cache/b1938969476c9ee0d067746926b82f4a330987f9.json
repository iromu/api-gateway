{
  "basePath": "/api-v2",
  "definitions": {
    "Article": {
      "properties": {
        "authors": {
          "description": "List of article authors",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "citations": {
          "description": "Citations found in the article",
          "items": {
            "$ref": "#/definitions/Citation"
          },
          "type": "array"
        },
        "contributors": {
          "description": "List of article contributors",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "The abstract",
          "type": "string"
        },
        "duplicates": {
          "description": "Duplicate article IDs",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "extractedUrls": {
          "description": "URLs which were extracted from the article fulltext",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fulltext": {
          "description": "Article full text",
          "type": "string"
        },
        "fulltextIdentifier": {
          "description": "Link to the PDF with the article fulltext",
          "type": "string"
        },
        "fulltextUrls": {
          "description": "URLs of the fulltext version of this article",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hasFullText": {
          "description": "Whether CORE can provide the fulltext of the article",
          "type": "boolean"
        },
        "id": {
          "description": "Article ID",
          "type": "integer"
        },
        "identifiers": {
          "description": "List of document identifiers",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "journalIdentifiers": {
          "description": "List of journal identifiers of journals this article belongs to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "journalTitle": {
          "description": "Title of the journal this article belongs to",
          "type": "string"
        },
        "language": {
          "$ref": "#/definitions/Language",
          "description": "Language of the article"
        },
        "originalIdentifier": {
          "description": "URL from which CORE harvested the fulltext. Not available in CORE API v2.0 beta",
          "type": "string"
        },
        "publisher": {
          "description": "Publisher of the article",
          "type": "string"
        },
        "rawRecordXml": {
          "$ref": "#/definitions/RawRecordXml",
          "description": "Raw XML metadata"
        },
        "relations": {
          "description": "URLs of relating articles, etc.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "repositories": {
          "description": "List of repositories this article belongs to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "repositoryIds": {
          "description": "List of repository IDs of repositories this article belongs to",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "similarities": {
          "description": "Similar articles",
          "items": {
            "$ref": "#/definitions/Similar"
          },
          "type": "array"
        },
        "size": {
          "description": "Size of the PDF in bytes",
          "type": "integer"
        },
        "snippet": {
          "description": "Search snippet",
          "type": "string"
        },
        "subjects": {
          "description": "Article subjects",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "Article title",
          "type": "string"
        },
        "topics": {
          "description": "Article topics",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "types": {
          "description": "Types, e.g. conference paper, journal paper, etc.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "year": {
          "description": "Year the article was published",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ]
    },
    "ArticleHistoryResponse": {
      "properties": {
        "data": {
          "description": "List of article versions",
          "items": {
            "$ref": "#/definitions/RawRecordXml"
          },
          "type": "array"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "OK",
            "Not found",
            "Too many queries",
            "Missing parameter",
            "Invalid parameter",
            "Parameter out of bounds"
          ],
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "ArticleResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/Article",
          "description": "The fetched article"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "OK",
            "Not found",
            "Too many queries",
            "Missing parameter",
            "Invalid parameter",
            "Parameter out of bounds"
          ],
          "type": "string"
        }
      },
      "required": [
        "data",
        "status"
      ]
    },
    "ArticleSearchResponse": {
      "properties": {
        "data": {
          "description": "Search results",
          "items": {
            "$ref": "#/definitions/Article"
          },
          "type": "array"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "OK",
            "Not found",
            "Too many queries",
            "Missing parameter",
            "Invalid parameter",
            "Parameter out of bounds"
          ],
          "type": "string"
        },
        "totalHits": {
          "description": "Total number of articles matching the search criteria",
          "type": "integer"
        }
      },
      "required": [
        "data",
        "status",
        "totalHits"
      ]
    },
    "ArticleSimilarResponse": {
      "properties": {
        "data": {
          "description": "Similar articles",
          "items": {
            "$ref": "#/definitions/Article"
          },
          "type": "array"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "OK",
            "Not found",
            "Too many queries",
            "Missing parameter",
            "Invalid parameter",
            "Parameter out of bounds"
          ],
          "type": "string"
        }
      },
      "required": [
        "data",
        "status"
      ]
    },
    "Citation": {
      "properties": {
        "authors": {
          "description": "Authors of the article",
          "type": "string"
        },
        "date": {
          "description": "Date the cited article was published",
          "type": "string"
        },
        "doi": {
          "description": "Digital Object Identifier",
          "type": "string"
        },
        "rawString": {
          "description": "Citation as raw string",
          "type": "string"
        },
        "title": {
          "description": "Title of the cited article",
          "type": "string"
        }
      }
    },
    "Journal": {
      "properties": {
        "identifiers": {
          "description": "List of journal identifiers (e.g. URL, OAI or ISSN). The type is prepended to the identifier string (e.g. 'issn:2296-0597')",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "language": {
          "description": "Language of the journal",
          "type": "string"
        },
        "publisher": {
          "description": "Publisher of the journal",
          "type": "string"
        },
        "rights": {
          "description": "Copyright license of the journal",
          "type": "string"
        },
        "subjects": {
          "description": "List of journal subjects",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "Journal title",
          "type": "string"
        }
      },
      "required": [
        "identifiers"
      ]
    },
    "JournalResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/Journal",
          "description": "The fetched journal"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "OK",
            "NOT_FOUND",
            "TOO_MANY_QUERIES",
            "MISSING_PARAMETER",
            "INVALID_PARAMETER"
          ],
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "JournalSearchResponse": {
      "properties": {
        "data": {
          "description": "Search results",
          "items": {
            "$ref": "#/definitions/Journal"
          },
          "type": "array"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "OK",
            "NOT_FOUND",
            "TOO_MANY_QUERIES",
            "MISSING_PARAMETER",
            "INVALID_PARAMETER"
          ],
          "type": "string"
        },
        "totalHits": {
          "description": "Total number of journals matching the search criteria",
          "type": "integer"
        }
      },
      "required": [
        "status",
        "totalHits"
      ]
    },
    "Language": {
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "RawRecordXml": {
      "properties": {
        "datetime": {
          "description": "Timestamp when CORE harvested the metadata",
          "format": "date-format",
          "type": "string"
        },
        "metadata": {
          "description": "The raw XML metadata",
          "type": "string"
        }
      }
    },
    "Repository": {
      "properties": {
        "id": {
          "description": "CORE repository ID",
          "type": "integer"
        },
        "name": {
          "description": "Repository name",
          "type": "string"
        },
        "openDoarId": {
          "description": "ID of the repository in Open DOAR",
          "type": "integer"
        },
        "repositoryLocation": {
          "$ref": "#/definitions/RepositoryLocation",
          "description": "Location of the repository"
        },
        "uri": {
          "description": "Repository URI",
          "type": "string"
        }
      }
    },
    "RepositoryLocation": {
      "properties": {
        "country": {
          "description": "Country name",
          "type": "string"
        },
        "countryCode": {
          "description": "Two letter country code",
          "type": "string"
        },
        "id": {
          "description": "CORE repository ID",
          "type": "integer"
        },
        "latitude": {
          "type": "integer"
        },
        "longitude": {
          "type": "integer"
        },
        "repositoryName": {
          "description": "Repository name",
          "type": "string"
        }
      }
    },
    "RepositoryResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/Repository",
          "description": "The fetched repository"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "OK",
            "Not found",
            "Too many queries",
            "Missing parameter",
            "Invalid parameter",
            "Parameter out of bounds"
          ],
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "RepositorySearchResponse": {
      "properties": {
        "data": {
          "description": "Search results",
          "items": {
            "$ref": "#/definitions/Repository"
          },
          "type": "array"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "OK",
            "Not found",
            "Too many queries",
            "Missing parameter",
            "Invalid parameter",
            "Parameter out of bounds"
          ],
          "type": "string"
        },
        "totalHits": {
          "description": "Total number of repositories matching the search criteria",
          "type": "integer"
        }
      },
      "required": [
        "status",
        "totalHits"
      ]
    },
    "Resource": {
      "properties": {
        "id": {
          "description": "Identifier of the resource",
          "type": "string"
        },
        "type": {
          "description": "Type of the resource",
          "enum": [
            "journal",
            "article",
            "repository"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "SearchAllResponse": {
      "properties": {
        "data": {
          "description": "List of relevant resources",
          "items": {
            "$ref": "#/definitions/Resource"
          },
          "type": "array"
        },
        "status": {
          "description": "Operation status",
          "enum": [
            "OK",
            "Not found",
            "Too many queries",
            "Missing parameter",
            "Invalid parameter",
            "Parameter out of bounds"
          ],
          "type": "string"
        },
        "totalHits": {
          "description": "Total number of items matching the search criteria",
          "type": "integer"
        }
      },
      "required": [
        "data",
        "status",
        "totalHits"
      ]
    },
    "SearchRequest": {
      "properties": {
        "page": {
          "default": 1,
          "description": "Which page of the search results should be retrieved. Can be any number from 1 to 100, default is 1 (first page)",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "pageSize": {
          "default": 10,
          "description": "The number of results to return per page. Can be any number from 10 to 100, default is 10",
          "maximum": 100,
          "minimum": 10,
          "type": "integer"
        },
        "query": {
          "description": "Search query",
          "type": "string"
        }
      },
      "required": [
        "query"
      ]
    },
    "Similar": {
      "properties": {
        "id": {
          "description": "CORE ID of the similar article",
          "type": "integer"
        },
        "score": {
          "description": "Similarity score",
          "format": "double",
          "type": "number"
        },
        "title": {
          "description": "Title of the similar article",
          "type": "string"
        }
      },
      "required": [
        "id",
        "score"
      ]
    }
  },
  "host": "core.ac.uk",
  "info": {
    "description": "<p style=\"text-align: justify;\">This is a documentation for CORE API v2.0. The CORE API is the programming \n    interface to <a href=\"http://core-project.kmi.open.ac.uk/\">CORE</a>. You can use the API to access the \n    resources harvested and enriched by CORE. The API described here is currently in beta. If you \n    encounter any problems with the API, please report them to us.</p>\n\n<h2>Overview</h2>\n<p style=\"text-align: justify;\">The API is organised by resource type. The resources are <b>articles</b>, \n    <b>journals</b> and <b>repositories</b> and are represented using JSON data format. Furthermore, \n    each resource has a list of methods. The API also provides two global methods for accessing all resources at once.</p>\n\n<h2>Response format</h2>\n<p style=\"text-align: justify;\">Response for each query contains two fields: <b>status</b> and <b>data</b>.\n    In case of an error status, the data field is empty. The data field contains a single object\n    in case the request is for a specific identifier (e.g. CORE ID, CORE repository ID, etc.), or  \n    contains a list of objects, for example for search queries. In case of batch requests, the response\n    is an array of objects, each of which contains its own <b>status</b> and <b>data</b> fields.\n    For search queries the response contains an additional field <b>totalHits</b>, which is the \n    total number of items which match the search criteria.</p>\n\n<h2>Search query syntax</h2>\n\n<p style=\"text-align: justify\">All of the API search methods allow using complex search queries.\n    The query can be a simple string or it can be built using terms and operators described in Elasticsearch\n    <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-query-string-query.html#query-string-syntax\">documentation</a>.\n    The usable field names are <strong>title</strong>, <strong>description</strong>, <strong>fullText</strong>, \n    <strong>authorsString</strong>, <strong>publisher</strong>, <strong>repositoryIds</strong>, <strong>doi</strong>,\n    <strong>identifiers</strong> (which is a list of article identifiers including OAI, URL, etc.), <strong>language.name</strong> \n    and <strong>year</strong>. Some example queries:\n</p>\n\n<ul style=\"margin-left: 30px;\">\n    <li><p>title:psychology and language.name:English</p></li>\n    <li><p>repositoryIds:86 AND year:2014</p></li>\n    <li><p>identifiers:\"oai:aura.abdn.ac.uk:2164/3837\" OR identifiers:\"oai:aura.abdn.ac.uk:2164/3843\"</p></li>\n    <li><p>doi:\"10.1186/1471-2458-6-309\"</p></li>\n</ul>\n\n<h2>Sort order</h2>\n\n<p style=\"text-align: justify;\">For search queries, the results are ordered by relevance score. For batch \n    requests, the results are retrieved in the order of the requests.</p>\n\n<h2>Parameters</h2>\n<p style=\"text-align: justify;\">The API methods allow different parameters to be passed. Additionally, there is an API key parameter which is common to all API methods. For all API methods \n    the API key can be provided either as a query parameter or in the request header. If the API key \n    is not provided, the API will return HTTP 401 error. You can register for an API key <a href=\"/intro/api\">here</a>.</p>\n\n<h2>API methods</h2>\n",
    "title": "CORE API v2 (beta)",
    "version": "2.0",
    "x-logo": {
      "url": "http://core.ac.uk/images/CORE-logo-sm.png"
    },
    "x-origin": {
      "format": "swagger",
      "url": "http://core.ac.uk/api-v2/doc",
      "version": "1.2"
    },
    "x-providerName": "core.ac.uk"
  },
  "paths": {
    "/articles/get": {
      "post": {
        "description": "Method accepts a JSON array of CORE IDs and retrieves a list of articles. The response array is ordered based on the order of the IDs in the request array.",
        "parameters": [
          {
            "description": "JSON array with CORE IDs of articles that need to be fetched",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "default": true,
            "description": "Whether to retrieve the full article metadata or only the IDs. The default value is true",
            "in": "query",
            "name": "metadata",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve fulltexts of the articles. The default value is false",
            "in": "query",
            "name": "fulltext",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve citations found in the articles. The default value is false",
            "in": "query",
            "name": "citations",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time",
            "in": "query",
            "name": "similar",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve CORE IDs of different versions of the articles. The default value is false",
            "in": "query",
            "name": "duplicate",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve lists of URLs of the article fulltexts. The default value is false",
            "in": "query",
            "name": "urls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of URLs which were extracted from the article fulltext. The default value is false. This parameter is not available in CORE API v2.0 beta",
            "in": "query",
            "name": "extractedUrls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve the raw XML metadata of the articles. The default value is false",
            "in": "query",
            "name": "faithfulMetadata",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ArticleResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Missing or malformed JSON in request body"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "403": {
            "description": "Too many queries in request body"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Batch operation for retrieving articles by CORE ID",
        "tags": [
          "articles"
        ]
      }
    },
    "/articles/get/{coreId}": {
      "get": {
        "description": "Method will retrieve an article based on given CORE ID.",
        "parameters": [
          {
            "description": "CORE ID of the article that needs to be fetched.",
            "format": "int64",
            "in": "path",
            "name": "coreId",
            "required": true,
            "type": "integer"
          },
          {
            "default": true,
            "description": "Whether to retrieve the full article metadata or only the ID. The default value is true.",
            "in": "query",
            "name": "metadata",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve full text of the article. The default value is false",
            "in": "query",
            "name": "fulltext",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve citations found in the article. The default value is false",
            "in": "query",
            "name": "citations",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time",
            "in": "query",
            "name": "similar",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false",
            "in": "query",
            "name": "duplicate",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false",
            "in": "query",
            "name": "urls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of URLs which were extracted from the article fulltext. The default value is false. This parameter is not available in CORE API v2.0 beta",
            "in": "query",
            "name": "extractedUrls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve the raw XML metadata of the article. The default value is false",
            "in": "query",
            "name": "faithfulMetadata",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ArticleResponse"
            }
          },
          "400": {
            "description": "Invalid identifier supplied"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Get article by CORE ID",
        "tags": [
          "articles"
        ]
      }
    },
    "/articles/get/{coreId}/download/pdf": {
      "get": {
        "description": "Method will retrieve an article based on given CORE ID.",
        "parameters": [
          {
            "description": "ID of article history that needs to be fetched",
            "in": "path",
            "name": "coreId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "404": {
            "description": "No Article pdf found"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Get fulltext PDF by CORE ID",
        "tags": [
          "articles"
        ]
      }
    },
    "/articles/get/{coreId}/history": {
      "get": {
        "description": "Method accepts a single CORE ID and returns a list of all historical versions of the article, which are stored in CORE database. The results are ordered from the newest one to the oldest one.",
        "parameters": [
          {
            "description": "CORE ID of the article which history should be fetched",
            "in": "path",
            "name": "coreId",
            "required": true,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Which page of the history results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page).",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results to return per page. Can be any number between 10 and 100, default is 10.",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 10,
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ArticleHistoryResponse"
            }
          },
          "400": {
            "description": "Parameter invalid or out of bounds"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Get article history by CORE ID",
        "tags": [
          "articles"
        ]
      }
    },
    "/articles/search": {
      "post": {
        "description": "Method accepts a JSON array of search queries and parameters. It then searches through all articles and returns a JSON array of search results for each of the queries. Method searches through all article fields (title, authors, subjects, identifiers, etc.).",
        "parameters": [
          {
            "description": "JSON array with search queries and parameters. One request can contain up to 100 queries",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/SearchRequest"
              },
              "type": "array"
            }
          },
          {
            "default": true,
            "description": "Whether to retrieve the full article metadata or only the ID. The default value is true.",
            "in": "query",
            "name": "metadata",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve full text of the article. The default value is false",
            "in": "query",
            "name": "fulltext",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve citations found in the article. The default value is false",
            "in": "query",
            "name": "citations",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time",
            "in": "query",
            "name": "similar",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false",
            "in": "query",
            "name": "duplicate",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false",
            "in": "query",
            "name": "urls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of URLs which were extracted from the article fulltext. The default value is false. This parameter is not available in CORE API v2.0 beta",
            "in": "query",
            "name": "extractedUrls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve the raw XML metadata of the article. The default value is false",
            "in": "query",
            "name": "faithfulMetadata",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ArticleSearchResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Missing or malformed JSON in request body"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "403": {
            "description": "Too many queries in request body"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Batch operation for search through articles",
        "tags": [
          "articles"
        ]
      }
    },
    "/articles/search/{query}": {
      "get": {
        "description": "Searches through all articles and returns a JSON array with search results. Method searches through all article fields.",
        "parameters": [
          {
            "description": "The search query",
            "format": "int64",
            "in": "path",
            "name": "query",
            "required": true,
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page).",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results to return per page. Can be any number between 10 and 100, default is 10.",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 10,
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "default": true,
            "description": "Whether to retrieve the full article metadata or only the ID. The default value is true.",
            "in": "query",
            "name": "metadata",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve full text of the article. The default value is false",
            "in": "query",
            "name": "fulltext",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve citations found in the article. The default value is false",
            "in": "query",
            "name": "citations",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time",
            "in": "query",
            "name": "similar",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of CORE IDs of different versions of the article. The default value is false",
            "in": "query",
            "name": "duplicate",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of URLs from which the article can be downloaded. This can include links to PDFs as well as HTML pages. The default value is false",
            "in": "query",
            "name": "urls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of URLs which were extracted from the article fulltext. The default value is false. This parameter is not available in CORE API v2.0 beta",
            "in": "query",
            "name": "extractedUrls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve the raw XML metadata of the article. The default value is false",
            "in": "query",
            "name": "faithfulMetadata",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ArticleSearchResponse"
            }
          },
          "400": {
            "description": "Parameter invalid or out of bounds"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Search through all documents",
        "tags": [
          "articles"
        ]
      }
    },
    "/articles/similar": {
      "post": {
        "description": "Method accepts a text and retrieves a JSON array of articles which are similar to the given text. The response array is ordered based on similarity score, starting from the most similar.",
        "parameters": [
          {
            "description": "The text that requires similar articles to be calculated on",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "default": 10,
            "description": "How many similar articles to retrieve at most. Can be any number betwen 1 and 100, default is 10",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": true,
            "description": "Whether to retrieve the full article metadata or only the IDs of the similar articles. The default value is true",
            "in": "query",
            "name": "metadata",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve fulltexts of the similar articles. The default value is false",
            "in": "query",
            "name": "fulltext",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve citations found in the articles. The default value is false",
            "in": "query",
            "name": "citations",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve lists of similar articles. The default value is false. Because the similar articles are calculated on demand, setting this parameter to true might slightly slow down the response time",
            "in": "query",
            "name": "similar",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve CORE IDs of different versions of the articles. The default value is false",
            "in": "query",
            "name": "duplicate",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve lists of URLs of the article fulltexts. The default value is false",
            "in": "query",
            "name": "urls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve a list of URLs which were extracted from the article fulltext. The default value is false. This parameter is not available in CORE API v2.0 beta",
            "in": "query",
            "name": "extractedUrls",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Whether to retrieve the raw XML metadata of the articles. The default value is false",
            "in": "query",
            "name": "faithfulMetadata",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ArticleSimilarResponse"
            }
          },
          "400": {
            "description": "Missing text in request body or parameter out of bounds or invalid parameter"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Get articles by similarity to a text",
        "tags": [
          "articles"
        ]
      }
    },
    "/journals/get": {
      "post": {
        "description": "Method accepts a JSON array of ISSNs and retrieves a list of journals.",
        "parameters": [
          {
            "description": "JSON array with ISSNs of journals that need to be fetched",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/JournalResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Missing or malformed JSON in request body"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "403": {
            "description": "Too many queries in request body"
          }
        },
        "summary": "Batch operation for retrieving journals by ISSN",
        "tags": [
          "journals"
        ]
      }
    },
    "/journals/get/{issn}": {
      "get": {
        "description": "Returns a journal with given ISSN identifier.",
        "parameters": [
          {
            "description": "ISSN identifier of journal that needs to be fetched.",
            "in": "path",
            "name": "issn",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/JournalResponse"
            }
          },
          "400": {
            "description": "Invalid ISSN identifier supplied"
          },
          "401": {
            "description": "Invalid or no API key provided"
          }
        },
        "summary": "Find journal by ISSN",
        "tags": [
          "journals"
        ]
      }
    },
    "/journals/search": {
      "post": {
        "description": "Method accepts a JSON array of search queries and parameters. It then searches through all journals and returns a JSON array of search results for each of the queries. Method searches through all journal fields (title, identifiers, subjects, language, rights and publisher).",
        "parameters": [
          {
            "description": "JSON array with search queries and parameters. One request can contain up to 100 queries.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/SearchRequest"
              },
              "type": "array"
            }
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/JournalResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Missing or malformed JSON in request body"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "403": {
            "description": "Too many queries in request body"
          }
        },
        "summary": "Batch operation for search through journals",
        "tags": [
          "journals"
        ]
      }
    },
    "/journals/search/{query}": {
      "get": {
        "description": "Searches through all journals and returns a JSON array of search results. Method searches through all journal fields (title, identifiers, subjects, language, rights and publisher).",
        "parameters": [
          {
            "description": "Search query",
            "in": "path",
            "name": "query",
            "required": true,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page).",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results to return per page. Can be any number between 10 and 100, default is 10.",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 10,
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/JournalSearchResponse"
            }
          },
          "400": {
            "description": "Parameter invalid or out of bounds"
          },
          "401": {
            "description": "Invalid or no API key provided"
          }
        },
        "summary": "Search through journals",
        "tags": [
          "journals"
        ]
      }
    },
    "/repositories/get": {
      "post": {
        "description": "Method accepts a JSON array of CORE repository IDs and retrieves a list of repositories. The response array is ordered based on the order of the IDs in the request array. The maximum number of IDs in request is 100.",
        "parameters": [
          {
            "description": "JSON array with CORE repository IDs of repositories that need to be fetched",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RepositoryResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Missing or malformed JSON in request body"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "403": {
            "description": "Too many queries in request body"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Batch operation for retrieving repositories by CORE repository ID",
        "tags": [
          "repositories"
        ]
      }
    },
    "/repositories/get/{repositoryId}": {
      "get": {
        "description": "Method will retrieve a repository based on given CORE repository ID.",
        "parameters": [
          {
            "description": "CORE repository ID of the article that needs to be fetched.",
            "in": "path",
            "name": "repositoryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/RepositoryResponse"
            }
          },
          "400": {
            "description": "Invalid identifier supplied"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Get repository by CORE repository ID",
        "tags": [
          "repositories"
        ]
      }
    },
    "/repositories/search": {
      "post": {
        "description": "Method accepts a JSON array of search queries and parameters. It then searches through all repositories and returns a JSON array of search results for each of the queries. Method searches through all repository fields.",
        "parameters": [
          {
            "description": "JSON array with search queries and parameters. One request can contain up to 100 queries",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/SearchRequest"
              },
              "type": "array"
            }
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/RepositorySearchResponse"
            }
          },
          "400": {
            "description": "Missing or malformed JSON in request body"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "403": {
            "description": "Too many queries in request body"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Batch operation for searching through repositories",
        "tags": [
          "repositories"
        ]
      }
    },
    "/repositories/search/{query}": {
      "get": {
        "description": "Searches through all repositories and returns a JSON array with search results. Method searches through all repository fields.",
        "parameters": [
          {
            "description": "The search query",
            "in": "path",
            "name": "query",
            "required": true,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page).",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results to return per page. Can be any number between 10 and 100, default is 10.",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 10,
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/RepositorySearchResponse"
            }
          },
          "400": {
            "description": "Parameter invalid or out of bounds"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Search through all repositories",
        "tags": [
          "repositories"
        ]
      }
    },
    "/search": {
      "post": {
        "description": "Method accepts a JSON array of search queries. It searches through all resources and returns a JSON array with search results for each of the queries. Method searches through all resources and all fields. The results are ordered by relevance score and contain type of the relevant resource and its ID. Furthermore, the responses are oredered based on the order of the request items. The metadata of each resource need to be obtained through an appropriate method.",
        "parameters": [
          {
            "description": "JSON array with search queries and pagination parameters. One request can contain up to 100 queries",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/SearchRequest"
              },
              "type": "array"
            }
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/SearchAllResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Missing or malformed JSON in request body"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "403": {
            "description": "Too many queries in request body"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Batch operation for search through all resources",
        "tags": [
          "all"
        ]
      }
    },
    "/search/{query}": {
      "get": {
        "description": "Searches through all resources and returns a JSON array with search results. Method searches through all resources and all fields. The results are ordered by relevance score and contain type of the relevant resource and its ID. The metadata of each resource need to be obtained through an appropriate method.",
        "parameters": [
          {
            "description": "The search query",
            "in": "path",
            "name": "query",
            "required": true,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Which page of the search results should be retrieved. Can be any number betwen 1 and 100, default is 1 (first page).",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results to return per page. Can be any number between 10 and 100, default is 10.",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 10,
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Your Api Key. Also accepts apiKey as a header",
            "in": "query",
            "name": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/SearchAllResponse"
            }
          },
          "400": {
            "description": "Parameter invalid or out of bounds"
          },
          "401": {
            "description": "Invalid or no API key provided"
          },
          "429": {
            "description": "Too many requests in given amount of time"
          }
        },
        "summary": "Search through all resources",
        "tags": [
          "all"
        ]
      }
    }
  },
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "tags": [
    {
      "description": "Global operations",
      "name": "all"
    },
    {
      "description": "Operations for retrieving articles",
      "name": "articles"
    },
    {
      "description": "Operations for retrieving journals",
      "name": "journals"
    },
    {
      "description": "Operations for retrieving repositories",
      "name": "repositories"
    }
  ]
}
