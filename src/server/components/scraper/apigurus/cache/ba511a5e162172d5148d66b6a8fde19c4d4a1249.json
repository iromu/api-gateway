{
  "basePath": "/1",
  "definitions": {
    "Address": {
      "properties": {
        "address": {
          "type": "string"
        },
        "address2": {
          "default": "",
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      },
      "required": [
        "address",
        "city",
        "state",
        "zip",
        "country"
      ]
    },
    "Criteria": {
      "properties": {
        "condition": {
          "description": "Apply this condition to the collection query. This is essentially like a SQL WHERE clause, e.g. firstname='Ben'",
          "type": "string"
        },
        "date_range": {
          "description": "Start and End dates to search, in seconds since Jan 1, 1970, as a comma-separated list. Start (index 0 in the array) is inclusive, End (index 1) is exclusive. Either or both can be empty.",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "externs": {
          "description": "External fields to include in results",
          "type": "string"
        },
        "group_ids": {
          "description": "Array of Group ID for Object type as comma-delimited list",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "ids": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "listFields": {
          "description": "Return only these fields in the response",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "objectID": {
          "description": "",
          "format": "int32",
          "type": "integer"
        },
        "performAll": {
          "default": false,
          "type": "boolean"
        },
        "range": {
          "description": "Number of results to return (maximum=50)",
          "format": "int32",
          "maximum": 50,
          "type": "integer"
        },
        "search": {
          "description": "Search objects for this string",
          "type": "string"
        },
        "searchNotes": {
          "description": "Boolean flag to additionally search Object Notes for the Search term given in Search parameter",
          "type": "string"
        },
        "sort": {
          "description": "Field used to sort results",
          "type": "string"
        },
        "sortDir": {
          "description": "Sort direction",
          "enum": [
            "asc",
            "desc"
          ],
          "type": "string"
        },
        "start": {
          "description": "Return results starting at this offset",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "objectID"
      ]
    },
    "Notification": {
      "properties": {
        "data": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "notification_type": {
          "enum": [
            "notification"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "plaintext"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "notification_type",
        "data",
        "type"
      ],
      "type": "object"
    },
    "Offer": {
      "properties": {
        "ccExpirationDate": {
          "default": "",
          "description": "Credit card expiration date",
          "type": "string"
        },
        "delay": {
          "description": "Days to delay start of offer",
          "format": "int32",
          "type": "integer"
        },
        "grandTotal": {
          "description": "Total amount of sale",
          "type": "number"
        },
        "hasShipping": {
          "default": false,
          "description": "Are there shipping charges?",
          "type": "boolean"
        },
        "hasTaxes": {
          "default": false,
          "description": "Are there applicable taxes?",
          "type": "boolean"
        },
        "offer_id": {
          "description": "This must be a valid Offer ID",
          "format": "int32",
          "type": "integer"
        },
        "order_id": {
          "description": "This must be a valid Order ID",
          "format": "int32",
          "type": "integer"
        },
        "products": {
          "items": {
            "$ref": "#/definitions/Product"
          },
          "type": "array"
        },
        "shipping": {
          "description": "Shipping amount",
          "type": "number"
        },
        "shipping_charge_reoccurring_orders": {
          "default": false,
          "description": "Add shipping charge to reoccurring orders?",
          "type": "boolean"
        },
        "subTotal": {
          "description": "Subtotal",
          "type": "number"
        },
        "taxes": {
          "items": {
            "$ref": "#/definitions/Tax"
          },
          "type": "array"
        }
      },
      "required": [
        "offer_id",
        "order_id",
        "products"
      ]
    },
    "Order": {
      "properties": {
        "affiliate_id": {
          "description": "Affiliate ID",
          "format": "int32",
          "type": "integer"
        },
        "billing_address": {
          "$ref": "#/definitions/Address"
        },
        "chargeNow": {
          "enum": [
            "chargeNow"
          ],
          "type": "string"
        },
        "contact_id": {
          "format": "int32",
          "type": "integer"
        },
        "gateway_id": {
          "description": "Gateway ID",
          "format": "int32",
          "type": "integer"
        },
        "invoice_template": {
          "description": "Invoice template ID",
          "format": "int32",
          "type": "integer"
        },
        "objectID": {
          "format": "int32",
          "type": "integer"
        },
        "offer": {
          "$ref": "#/definitions/Offer"
        },
        "payer": {
          "$ref": "#/definitions/Payer"
        }
      },
      "required": [
        "objectID",
        "contact_id"
      ]
    },
    "Payer": {
      "properties": {
        "ccnumber": {
          "default": "",
          "type": "string"
        },
        "code": {
          "default": "",
          "description": "CVV code",
          "type": "string"
        },
        "expire_month": {
          "description": "Expiration month (1-12)",
          "type": "integer"
        },
        "expire_year": {
          "description": "Expiration year (four-digit year, e.g. 2018)",
          "type": "integer"
        }
      },
      "required": [
        "ccnumber",
        "code"
      ]
    },
    "Price": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "payment_count": {
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "type": "number"
        },
        "unit": {
          "enum": [
            "day",
            "week",
            "month",
            "quarter",
            "year"
          ],
          "type": "string"
        }
      },
      "required": [
        "price",
        "payment_count",
        "unit",
        "id"
      ]
    },
    "Product": {
      "properties": {
        "delay_start": {
          "description": "Days to delay start",
          "format": "int32",
          "type": "integer"
        },
        "download_limit": {
          "description": "Limit number of downloads after purchase",
          "format": "int32",
          "type": "integer"
        },
        "download_time_limit": {
          "description": "Limit length of time product can be downloaded",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "This must be an existing Product ID",
          "format": "int32",
          "type": "integer"
        },
        "level1": {
          "description": "Partner Level 1 Commission Percentage",
          "type": "number"
        },
        "level2": {
          "description": "Partner Level 2 Commission Percentage",
          "type": "number"
        },
        "offer_to_affiliates": {
          "default": false,
          "description": "Is this offered to affiliates?",
          "type": "boolean"
        },
        "owner": {
          "description": "Product owner (Staff ID)",
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "items": {
            "$ref": "#/definitions/Price"
          },
          "type": "array"
        },
        "product_type": {
          "enum": [
            "digital",
            "physical"
          ],
          "type": "string"
        },
        "quantity": {
          "description": "How many of this product are being purchased?",
          "format": "int32",
          "type": "integer"
        },
        "setup_fee": {
          "description": "One-time setup fee",
          "type": "number"
        },
        "setup_fee_date": {
          "description": "Date to charge setup fee (when setup_fee_when is \"on_date\")",
          "type": "string"
        },
        "setup_fee_when": {
          "description": "When should setup fee be applied?",
          "enum": [
            "immediately",
            "after_trial",
            "on_date"
          ],
          "type": "string"
        },
        "shipping": {
          "default": false,
          "description": "Does this product have an associated shipping cost?",
          "type": "boolean"
        },
        "sku": {
          "description": "Product SKU",
          "type": "string"
        },
        "subscription_count": {
          "format": "int32",
          "type": "integer"
        },
        "subscription_fee": {
          "type": "number"
        },
        "subscription_unit": {
          "enum": [
            "day",
            "week",
            "month",
            "quarter",
            "year"
          ],
          "type": "string"
        },
        "tax": {
          "default": false,
          "description": "Is this product taxable?",
          "type": "boolean"
        },
        "taxable": {
          "description": "Is this item taxable?",
          "type": "boolean"
        },
        "total": {
          "description": "What is the total amount of this sale?",
          "type": "number"
        },
        "trial_period_count": {
          "description": "Length of trial period (also set trial_period_units)",
          "format": "int32",
          "type": "integer"
        },
        "trial_period_unit": {
          "description": "Units describing length of trial period",
          "enum": [
            "day",
            "week",
            "month",
            "quarter",
            "year"
          ],
          "type": "string"
        },
        "trial_price": {
          "description": "Price during trial period",
          "type": "number"
        },
        "type": {
          "enum": [
            "single",
            "subscription",
            "one_time",
            "payment_plan"
          ],
          "type": "string"
        }
      },
      "required": [
        "quantity",
        "total",
        "price"
      ]
    },
    "Response": {
      "properties": {
        "account_id": {
          "format": "int32",
          "type": "integer"
        },
        "code": {
          "type": "integer"
        },
        "data": {
          "type": "object"
        },
        "notifications": {
          "$ref": "#/definitions/Notification",
          "type": "array"
        },
        "updates": {
          "$ref": "#/definitions/Update",
          "type": "array"
        }
      },
      "required": [
        "code",
        "data",
        "updates",
        "notifications",
        "account_id"
      ],
      "type": "object"
    },
    "Shipping": {
      "properties": {
        "id": {
          "description": "ID of the Shipping Method to apply. This must be an existing Shipping Method.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ]
    },
    "TaskCompleteParams": {
      "properties": {
        "criteria": {
          "$ref": "#/definitions/Criteria"
        },
        "data": {
          "$ref": "#/definitions/TaskData"
        }
      },
      "required": [
        "criteria",
        "data"
      ]
    },
    "TaskData": {
      "properties": {
        "followup": {
          "$ref": "#/definitions/TaskFollowup"
        },
        "outcome": {
          "description": "Task outcome name. This must start with \":=\" For example, <strong>\":=signed\"</strong>",
          "type": "string"
        },
        "task_form_data": {
          "description": "These fields can be used to update associated Object data when completing a task. For example, set <strong>task_form_title</strong> to \"New title\" to change the Contact's title.",
          "type": "string"
        }
      }
    },
    "TaskFollowup": {
      "properties": {
        "due_date": {
          "description": "Due date of new Task, given as number of days from current date",
          "format": "int32",
          "type": "integer"
        },
        "message_id": {
          "description": "Message ID of new Task to be created for further followup. This Task must currently exist. New tasks can be created using the <a href=\"http://api.ontraport.com/doc/#!/objects/createObject\">Objects Create endpoint</a> with objectID=1",
          "format": "int32",
          "type": "integer"
        },
        "task_owner": {
          "description": "New Task assignee",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "message_id",
        "due_date",
        "task_owner"
      ]
    },
    "Tax": {
      "properties": {
        "id": {
          "description": "ID of the Tax to apply. This must be an existing Tax type.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ]
    },
    "Transaction": {
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/Address"
        },
        "chargeNow": {
          "description": "Charge transaction now or or just log a transaction",
          "enum": [
            "chargeNow",
            "chargeLog"
          ],
          "type": "string"
        },
        "contact_id": {
          "description": "Create new transaction for this Object instance (Contact ID)",
          "type": "integer"
        },
        "gateway_id": {
          "description": "Gateway ID to use for this transaction",
          "type": "integer"
        },
        "invoice_template": {
          "description": "Invoice ID to use for this transaction",
          "example": 1,
          "type": "integer"
        },
        "offer": {
          "$ref": "#/definitions/Offer"
        },
        "payer": {
          "$ref": "#/definitions/Payer"
        },
        "trans_date": {
          "description": "Timestamp (in milliseconds since midnight 1/1/1970) of the transaction",
          "type": "integer"
        }
      },
      "required": [
        "contact_id",
        "chargeNow",
        "invoice_template",
        "gateway_id",
        "offer"
      ]
    },
    "Update": {
      "type": "object"
    }
  },
  "externalDocs": {
    "url": "https://ontraport.com/ontraport-api"
  },
  "host": "api.ontraport.com",
  "info": {
    "contact": {
      "email": "support@ontraport.com",
      "name": "ONTRAPORT Engineering",
      "url": "http://support.ontraport.com/"
    },
    "description": "<p>Enter App ID and API Key above. If you don't have an API Key, <a href=\"https://app.ontraport.com/#!/api_settings/listAll\">go here to get one</a>. Authentication parameters must be sent in the request header as <strong>Api-Appid</strong> and <strong>Api-Key</strong>.",
    "termsOfService": "http://ontraport.com/terms/",
    "title": "ONTRAPORT API",
    "version": "1.1.2",
    "x-logo": {
      "url": "https://ontraport.com/assets/images/ONTRAPORT_logo_150px.png"
    },
    "x-origin": {
      "format": "swagger",
      "url": "https://api.ontraport.com/1/api-docs/swagger.json",
      "version": "2.0"
    },
    "x-providerName": "ontraport.com"
  },
  "parameters": {
    "addListParamFormData": {
      "description": "Array of Tag IDs as comma-delimited list",
      "in": "formData",
      "items": {
        "format": "int32",
        "type": "integer"
      },
      "name": "add_list",
      "type": "array"
    },
    "bmasksParam": {
      "description": "???",
      "format": "int32",
      "in": "query",
      "name": "bmasks",
      "type": "integer"
    },
    "bmasksParamFormData": {
      "description": "???",
      "format": "int32",
      "in": "formData",
      "name": "bmasks",
      "type": "integer"
    },
    "conditionParam": {
      "description": "Apply this condition to the collection query. This is essentially like a SQL WHERE clause, e.g. firstname='Ben'",
      "in": "query",
      "name": "condition",
      "type": "string"
    },
    "conditionParamFormData": {
      "description": "Apply this condition to the collection query. This is essentially like a SQL WHERE clause, e.g. firstname='Ben'",
      "in": "formData",
      "name": "condition",
      "type": "string"
    },
    "date_rangeParam": {
      "description": "Start and End dates to search, in seconds since Jan 1, 1970, as a comma-separated list. Start (index 0 in the array) is inclusive, End (index 1) is exclusive. Either or both can be empty.",
      "in": "query",
      "items": {
        "format": "int32",
        "type": "integer"
      },
      "name": "date_range",
      "type": "array"
    },
    "date_rangeParamFormData": {
      "description": "Start and End dates to search, in seconds since Jan 1, 1970, as a comma-separated list. Start (index 0 in the array) is inclusive, End (index 1) is exclusive. Either or both can be empty.",
      "in": "formData",
      "items": {
        "format": "int32",
        "type": "integer"
      },
      "name": "date_range",
      "type": "array"
    },
    "dupeParam": {
      "description": "???",
      "in": "query",
      "name": "dupe",
      "type": "string"
    },
    "dupeParamFormData": {
      "description": "???",
      "in": "formData",
      "name": "dupe",
      "type": "string"
    },
    "externsParam": {
      "description": "External fields to include in results",
      "in": "query",
      "name": "externs",
      "type": "string"
    },
    "externsParamFormData": {
      "description": "External fields to include in results",
      "in": "formData",
      "name": "externs",
      "type": "string"
    },
    "group_idsParam": {
      "description": "Array of Group ID for Object type as comma-delimited list",
      "in": "query",
      "items": {
        "format": "int32",
        "type": "integer"
      },
      "name": "group_ids",
      "type": "array"
    },
    "group_idsParamFormData": {
      "description": "Array of Group ID for Object type as comma-delimited list",
      "in": "formData",
      "items": {
        "format": "int32",
        "type": "integer"
      },
      "name": "group_ids",
      "type": "array"
    },
    "idParam": {
      "description": "ID of Object",
      "format": "int32",
      "in": "query",
      "name": "id",
      "type": "integer"
    },
    "idParamFormData": {
      "description": "ID of Object",
      "format": "int32",
      "in": "formData",
      "name": "id",
      "type": "integer"
    },
    "idsParam": {
      "description": "Array of Object IDs as comma-delimited list",
      "in": "query",
      "items": {
        "format": "int32",
        "type": "integer"
      },
      "name": "ids",
      "type": "array"
    },
    "idsParamFormData": {
      "description": "Array of Object IDs as comma-delimited list",
      "in": "formData",
      "items": {
        "format": "int32",
        "type": "integer"
      },
      "name": "ids",
      "type": "array"
    },
    "listFieldsParam": {
      "description": "Array of fields to return in response as comma-delimited list",
      "in": "query",
      "items": {
        "type": "string"
      },
      "name": "listFields",
      "type": "array"
    },
    "listFieldsParamFormData": {
      "description": "Array of fields to return in response as comma-delimited list",
      "in": "formData",
      "items": {
        "type": "string"
      },
      "name": "listFields",
      "type": "array"
    },
    "object_type_idParam": {
      "description": "Return results pertaining only to this Object type ID",
      "format": "int32",
      "in": "query",
      "name": "object_type_id",
      "type": "integer"
    },
    "object_type_idParamFormData": {
      "description": "Return results pertaining only to this Object type ID",
      "format": "int32",
      "in": "formData",
      "name": "object_type_id",
      "type": "integer"
    },
    "objectIdParam": {
      "description": "Object Type ID",
      "format": "int32",
      "in": "query",
      "name": "objectID",
      "type": "integer"
    },
    "objectIdParamFormData": {
      "description": "Object Type ID",
      "format": "int32",
      "in": "formData",
      "name": "objectID",
      "type": "integer"
    },
    "performAllParam": {
      "default": false,
      "description": "Perform request on all objects that match criteria",
      "in": "query",
      "name": "performAll",
      "type": "boolean"
    },
    "performAllParamFormData": {
      "default": false,
      "description": "Perform request on all objects that match criteria",
      "in": "formData",
      "name": "performAll",
      "type": "boolean"
    },
    "rangeParam": {
      "description": "Number of results to return (maximum=50)",
      "format": "int32",
      "in": "query",
      "maximum": 50,
      "name": "range",
      "type": "integer"
    },
    "rangeParamFormData": {
      "description": "Number of results to return (maximum=50)",
      "format": "int32",
      "in": "formData",
      "maximum": 50,
      "name": "range",
      "type": "integer"
    },
    "removeListParamFormData": {
      "description": "Array of Tag IDs as comma-delimited list",
      "in": "formData",
      "items": {
        "format": "int32",
        "type": "integer"
      },
      "name": "remove_list",
      "type": "array"
    },
    "search_fieldsParam": {
      "default": false,
      "description": "???",
      "in": "query",
      "name": "search_fields",
      "type": "boolean"
    },
    "search_fieldsParamFormData": {
      "default": false,
      "description": "???",
      "in": "formData",
      "name": "search_fields",
      "type": "boolean"
    },
    "searchNotesParam": {
      "description": "Boolean flag to additionally search Object Notes for the Search term given in Search parameter",
      "in": "query",
      "name": "searchNotes",
      "type": "boolean"
    },
    "searchNotesParamFormData": {
      "description": "Boolean flag to additionally search Object Notes for the Search term given in Search parameter",
      "in": "formData",
      "name": "searchNotes",
      "type": "boolean"
    },
    "searchParam": {
      "description": "Search objects for this string",
      "in": "query",
      "name": "search",
      "type": "string"
    },
    "searchParamFormData": {
      "description": "Search objects for this string",
      "in": "formData",
      "name": "search",
      "type": "string"
    },
    "sortDirParam": {
      "description": "Sort direction",
      "enum": [
        "asc",
        "desc"
      ],
      "in": "query",
      "name": "sortDir",
      "type": "string"
    },
    "sortDirParamFormData": {
      "description": "Sort direction",
      "enum": [
        "asc",
        "desc"
      ],
      "in": "formData",
      "name": "sortDir",
      "type": "string"
    },
    "sortDispParam": {
      "description": "???",
      "in": "query",
      "name": "sortDisp",
      "type": "string"
    },
    "sortDispParamFormData": {
      "description": "???",
      "in": "formData",
      "name": "sortDisp",
      "type": "string"
    },
    "sortParam": {
      "description": "Field used to sort results",
      "in": "query",
      "name": "sort",
      "type": "string"
    },
    "sortParamFormData": {
      "description": "Field used to sort results",
      "in": "formData",
      "name": "sort",
      "type": "string"
    },
    "startParam": {
      "description": "Return results starting at this offset",
      "format": "int32",
      "in": "query",
      "name": "start",
      "type": "integer"
    },
    "startParamFormData": {
      "description": "Return results starting at this offset",
      "format": "int32",
      "in": "formData",
      "name": "start",
      "type": "integer"
    }
  },
  "paths": {
    "/form": {
      "get": {
        "description": "Fetch form HTML for a given ID<br/><b>Note</b>: HTML is returned in the <code>data</code> member of the JSON response. Therefore, the HTML is escaped, so you will have to unescape the HTML before using it.",
        "operationId": "getForm",
        "parameters": [
          {
            "$ref": "#/parameters/idParam",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful object query",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "404": {
            "description": "Form not found"
          }
        },
        "summary": "Get a Form's HTML",
        "tags": [
          "forms"
        ]
      }
    },
    "/landingPage/getHostedURL": {
      "get": {
        "description": "This will grab the permenant URL for that landingpage",
        "operationId": "getHostedURL",
        "parameters": [
          {
            "$ref": "#/parameters/idParam",
            "description": "Id of the Landing Page",
            "name": "id",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully got URL",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error processing transaction"
          }
        },
        "summary": "Grab the hosted URL",
        "tags": [
          "landingPage"
        ]
      }
    },
    "/message": {
      "get": {
        "description": "",
        "operationId": "getMessage",
        "parameters": [
          {
            "$ref": "#/parameters/idParam",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful object query",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "404": {
            "description": "Message not found"
          }
        },
        "summary": "Get an existing Message object",
        "tags": [
          "messages"
        ]
      }
    },
    "/object": {
      "get": {
        "description": "Fetch data for a given object type and ID",
        "operationId": "getObject",
        "parameters": [
          {
            "$ref": "#/parameters/objectIdParam",
            "required": true
          },
          {
            "$ref": "#/parameters/idParam",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful object query",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid objectID"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Get an object's data",
        "tags": [
          "objects"
        ]
      }
    },
    "/objects": {
      "get": {
        "description": "",
        "operationId": "getObjects",
        "parameters": [
          {
            "$ref": "#/parameters/objectIdParam",
            "required": true
          },
          {
            "$ref": "#/parameters/idsParam",
            "required": false
          },
          {
            "$ref": "#/parameters/performAllParam",
            "required": false
          },
          {
            "$ref": "#/parameters/startParam",
            "required": false
          },
          {
            "$ref": "#/parameters/rangeParam",
            "required": false
          },
          {
            "$ref": "#/parameters/sortParam",
            "required": false
          },
          {
            "$ref": "#/parameters/sortDirParam",
            "required": false
          },
          {
            "$ref": "#/parameters/conditionParam",
            "required": false
          },
          {
            "$ref": "#/parameters/searchParam",
            "required": false
          },
          {
            "$ref": "#/parameters/searchNotesParam",
            "required": false
          },
          {
            "$ref": "#/parameters/date_rangeParam",
            "required": false
          },
          {
            "$ref": "#/parameters/group_idsParam",
            "required": false
          },
          {
            "$ref": "#/parameters/externsParam",
            "required": false
          },
          {
            "$ref": "#/parameters/listFieldsParam",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful object query",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid objectID"
          }
        },
        "summary": "Get a list of objects",
        "tags": [
          "objects"
        ]
      },
      "post": {
        "description": "Create an object with given data. Object type is a required parameters, but other parameters are optional and depend on the object type. We have provided optional parameters as examples for updating a contact object. When using this in your application, invalid parameters will be ignored.",
        "operationId": "createObject",
        "parameters": [
          {
            "$ref": "#/parameters/objectIdParamFormData",
            "required": true
          },
          {
            "description": "New first name for object",
            "in": "formData",
            "name": "firstname",
            "type": "string"
          },
          {
            "description": "New last name for object",
            "in": "formData",
            "name": "lastname",
            "type": "string"
          },
          {
            "description": "New email address for object",
            "in": "formData",
            "name": "email",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful object query",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid objectID"
          }
        },
        "summary": "Create an object",
        "tags": [
          "objects"
        ]
      },
      "put": {
        "description": "Update an object's data. Object type and ID and required parameters, but other parameters depend on the object type. We have provided optional parameters as examples for updating a contact object. When using this in your application, invalid parameters will be ignored.",
        "operationId": "updateObjects",
        "parameters": [
          {
            "$ref": "#/parameters/objectIdParamFormData",
            "required": true
          },
          {
            "$ref": "#/parameters/idParamFormData",
            "required": true
          },
          {
            "description": "New first name for object",
            "in": "formData",
            "name": "firstname",
            "type": "string"
          },
          {
            "description": "New last name for object",
            "in": "formData",
            "name": "lastname",
            "type": "string"
          },
          {
            "description": "New email address for object",
            "in": "formData",
            "name": "email",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully updated object",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Update an object's data",
        "tags": [
          "objects"
        ]
      }
    },
    "/objects/meta": {
      "get": {
        "description": "Get a list of existing object types and corresponding field names. Use objectID parameter to get a single Object type.",
        "operationId": "getMeta",
        "parameters": [
          {
            "default": "byId",
            "description": "Choose to get the list indexed by Object class name or integer ID",
            "enum": [
              "byId",
              "byName"
            ],
            "in": "query",
            "name": "format",
            "type": "string"
          },
          {
            "$ref": "#/parameters/objectIdParam",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful object query",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          }
        },
        "summary": "Get a list of existing object types",
        "tags": [
          "objects"
        ]
      }
    },
    "/objects/tag": {
      "delete": {
        "description": "Remove a Tag from an Object. When adding and removing tags, either <b>ids</b> or <b>group_ids</b> must be given.",
        "operationId": "removeTag",
        "parameters": [
          {
            "$ref": "#/parameters/objectIdParamFormData",
            "required": true
          },
          {
            "$ref": "#/parameters/removeListParamFormData",
            "required": true
          },
          {
            "$ref": "#/parameters/idsParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/performAllParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/startParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/rangeParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/sortParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/sortDirParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/conditionParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/searchParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/searchNotesParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/date_rangeParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/group_idsParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/externsParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/listFieldsParamFormData",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully removed Tag(s)",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          }
        },
        "summary": "Remove an Object Tag",
        "tags": [
          "objects"
        ]
      },
      "put": {
        "description": "Add a Tag to an Object. When adding and removing tags, either <b>ids</b> or <b>group_ids</b> must be given.",
        "operationId": "addTag",
        "parameters": [
          {
            "$ref": "#/parameters/objectIdParamFormData",
            "required": true
          },
          {
            "$ref": "#/parameters/addListParamFormData",
            "required": true
          },
          {
            "$ref": "#/parameters/idsParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/performAllParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/startParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/rangeParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/sortParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/sortDirParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/conditionParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/searchParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/searchNotesParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/date_rangeParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/group_idsParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/externsParamFormData",
            "required": false
          },
          {
            "$ref": "#/parameters/listFieldsParamFormData",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully added Tag(s)",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          }
        },
        "summary": "Add an Object Tag",
        "tags": [
          "objects"
        ]
      }
    },
    "/task/cancel": {
      "post": {
        "description": "To affect a single task or list of specific tasks, use the <strong>ids</strong> array in the <strong>criteria</strong> parameter; otherwise, use <strong>performAll</strong> and other criteria to select a group of Tasks to cancel.",
        "operationId": "taskCancel",
        "parameters": [
          {
            "description": "Criteria of tasks to cancel",
            "in": "body",
            "name": "criteria",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Criteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully canceled tasks",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          }
        },
        "summary": "Cancel a set of tasks",
        "tags": [
          "tasks"
        ]
      }
    },
    "/task/complete": {
      "post": {
        "description": "Mark one or many Tasks complete and optionally assign a new Task for further followup. To affect a single task or list of specific tasks, use the <strong>ids</strong> array in the <strong>criteria</strong> parameter; otherwise, use <strong>performAll</strong> and other criteria to select a group of Tasks to complete.",
        "operationId": "taskComplete",
        "parameters": [
          {
            "description": "Criteria and data of tasks to complete",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCompleteParams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully canceled tasks",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          }
        },
        "summary": "Complete a set of tasks",
        "tags": [
          "tasks"
        ]
      }
    },
    "/transaction/convertToCollections": {
      "put": {
        "description": "",
        "operationId": "convertToCollections",
        "parameters": [
          {
            "$ref": "#/parameters/idParamFormData",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully converted transaction",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error converting transaction"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Convert status of one or more transactions to Collections",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/convertToDecline": {
      "put": {
        "description": "",
        "operationId": "convertToDecline",
        "parameters": [
          {
            "$ref": "#/parameters/idParamFormData",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully converted transaction",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error converting transaction"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Convert status of one or more transactions to Declined",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/markPaid": {
      "put": {
        "description": "",
        "operationId": "markPaid",
        "parameters": [
          {
            "$ref": "#/parameters/idParamFormData",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully marked as paid",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error marking Transaction as paid"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Mark a transaction as Paid",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/order": {
      "get": {
        "description": "",
        "operationId": "getOrder",
        "parameters": [
          {
            "description": "Order ID",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success fetching Order",
            "schema": {
              "items": {
                "$ref": "#/definitions/Response"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Error fetching Order"
          }
        },
        "summary": "Get full information about an order",
        "tags": [
          "transactions"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update information about an Order. If Offer data is omitted, this Order will be Deleted.",
        "operationId": "setOrder",
        "parameters": [
          {
            "description": "Order object",
            "in": "body",
            "name": "order",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Order information",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error updating Order information"
          }
        },
        "summary": "Update information about an Order",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/processManual": {
      "post": {
        "description": "Create a transaction for a contact. This request requires valid parameters for all associated members of the transaction; otherwise, the request will fail. If you have doubled-checked all parameters and the request is still failing, check the payload JSON format is correct using <a href=\"http://jsonlint.com/\">JSONLint</a>. If credit card and billing information already exist for this contact, <b>billing_address</b> and <b>payer</b> can be omitted from the request. Note that <b>trans_date</b> is given in milliseconds since midnight 1/1/1970.",
        "operationId": "processManual",
        "parameters": [
          {
            "description": "Definition of transaction",
            "in": "body",
            "name": "transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully created transaction",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error processing transaction"
          }
        },
        "summary": "Create a new transaction",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/refund": {
      "put": {
        "description": "",
        "operationId": "refund",
        "parameters": [
          {
            "description": "Criteria of transactions to refund",
            "in": "body",
            "name": "criteria",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Criteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully refunded transaction",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error refunding transaction"
          }
        },
        "summary": "Refund one or more transactions",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/rerun": {
      "post": {
        "description": "Re-run a single or group of Transactions that are currently in Collections.",
        "operationId": "rerun",
        "parameters": [
          {
            "description": "Criteria of transactions to rerun",
            "in": "body",
            "name": "criteria",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Criteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully reran transaction",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error rerunning transaction"
          }
        },
        "summary": "Re-run a transaction",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/rerunCommission": {
      "put": {
        "description": "",
        "operationId": "rerunCommission",
        "parameters": [
          {
            "description": "Criteria of transactions to rerun commissions",
            "in": "body",
            "name": "criteria",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Criteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully reran commission",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error rerunning commission"
          }
        },
        "summary": "Re-run a Partner Commission",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/resendInvoice": {
      "post": {
        "description": "",
        "operationId": "resendInvoice",
        "parameters": [
          {
            "description": "Definition of transaction",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully created transaction",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error processing transaction"
          }
        },
        "summary": "Re-send a transaction invoice",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/void": {
      "put": {
        "description": "",
        "operationId": "void",
        "parameters": [
          {
            "description": "Criteria of transactions to void",
            "in": "body",
            "name": "criteria",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Criteria"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully voided transaction",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error voiding transaction"
          }
        },
        "summary": "Void a transaction",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/voidPurchase": {
      "put": {
        "description": "",
        "operationId": "voidPurchase",
        "parameters": [
          {
            "$ref": "#/parameters/idParamFormData",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully voided purchase",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error voiding purchase"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Void a purchase",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transaction/writeOff": {
      "put": {
        "description": "",
        "operationId": "writeOff",
        "parameters": [
          {
            "$ref": "#/parameters/idParamFormData",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully wrote off transaction",
            "schema": {
              "$ref": "#/definitions/Response",
              "type": "object"
            }
          },
          "400": {
            "description": "Error writing off transaction"
          },
          "404": {
            "description": "Object not found"
          }
        },
        "summary": "Write-off a transaction",
        "tags": [
          "transactions"
        ]
      }
    }
  },
  "responses": {
    "default": {
      "description": "Standard response object",
      "schema": {
        "items": {
          "$ref": "#/definitions/Response"
        }
      }
    }
  },
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "tags": [
    {
      "description": "Create, Update, and Fetch Contacts or other Objects",
      "name": "objects"
    },
    {
      "description": "Fetch form content",
      "name": "forms"
    },
    {
      "description": "Fetch E-mail, SMS, or other Message content",
      "name": "messages"
    },
    {
      "description": "Cancel and Complete Tasks",
      "name": "tasks"
    },
    {
      "description": "Everything to do with payment Transactions",
      "name": "transactions"
    },
    {
      "description": "Methods specifically belonging to Landing Pages",
      "name": "landingPage"
    }
  ]
}
