{
  "basePath": "/api/1",
  "definitions": {
    "App": {
      "properties": {
        "created_on": {
          "description": "The timestamp of when the device was created. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "description": "The description of the application, such as \"My Awesome App does awesome things\".",
          "type": "string"
        },
        "id": {
          "description": "The UUID of the application.",
          "type": "string"
        },
        "name": {
          "description": "The name of the application, such as \"My Awesome App\".",
          "type": "string"
        },
        "org_id": {
          "description": "The universally unique identifier (UUID) of the organization that the application belongs to.",
          "type": "string"
        },
        "tags": {
          "description": "An array containing the UUIDs of the tags created by the user.",
          "items": {
            "$ref": "#/definitions/AppTag"
          },
          "type": "array"
        }
      },
      "required": [
        "org_id",
        "name",
        "description",
        "id",
        "created_on"
      ]
    },
    "AppCapability": {
      "properties": {
        "association": {
          "description": "The association to use. This call be an empty string or \"user\".",
          "type": "string"
        },
        "cap_name": {
          "description": "The capability name.",
          "type": "string"
        },
        "expires_on": {
          "description": "Whether the granted capability expires. If there is no expiry date, the value is \"null\".",
          "type": "string"
        },
        "granted_name": {
          "description": "The name of the entity that&#39;s being granted the capability.",
          "type": "string"
        },
        "granted_org_id": {
          "description": "The UUID of the organization that the granted entity belongs to.",
          "type": "string"
        },
        "granted_org_name": {
          "description": "The organization name of the application that&#39;s granted the capability.",
          "type": "string"
        },
        "granted_to": {
          "description": "The UUID of the entity that&#39;s granted the capability.",
          "type": "string"
        },
        "granted_type": {
          "description": "The type of entity that&#39;s that is granted the new capability. The values can be \"app\", \"device\", \"org\", \"tag\", or \"user\".",
          "type": "string"
        },
        "target_id": {
          "description": "The universally unique identifier (UUID) of what the capability grants permissions to.",
          "type": "string"
        },
        "target_name": {
          "description": "The name of the entity granting the capability.",
          "type": "string"
        },
        "target_type": {
          "description": "The entity type that the capability is granted on, called a target.",
          "type": "string"
        }
      },
      "required": [
        "target_id",
        "target_type",
        "cap_name",
        "granted_to",
        "granted_type"
      ]
    },
    "AppCreate": {
      "properties": {
        "description": {
          "description": "A description of the application.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the application, such as \"My Awesome App\".",
          "type": "string"
        },
        "org_id": {
          "description": "The universally unique identifier (UUID) of the organization (UUID) that the application belongs to.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "AppKeys": {
      "properties": {
        "api_key": {
          "description": "A key, referred to as API KEY, that uniquely identifies the application during the authentication process. The authentication process is used to verify the authenticity of the application to the system.\n",
          "type": "string"
        },
        "api_secret": {
          "description": "A string, referred to as API SECRET that&#39;s used with the 'api_key' during the authentication process. Ensure that you don&#39;t share this secret and keep it secure.\n",
          "type": "string"
        }
      },
      "required": [
        "api_key",
        "api_secret"
      ]
    },
    "AppTag": {
      "properties": {
        "tag_id": {
          "description": "The universally unique identifier (UUID) of the tag.",
          "type": "string"
        }
      }
    },
    "AppUpdate": {
      "properties": {
        "description": {
          "description": "The description of the application, such as \"My Awesome App does awesome things\".",
          "type": "string"
        },
        "name": {
          "description": "The name of the application, such as \"My Awesome App\".",
          "type": "string"
        }
      }
    },
    "Cap": {
      "properties": {
        "display_name": {
          "description": "The display name of the capability.",
          "type": "string"
        },
        "name": {
          "description": "The internal name of the capability.",
          "type": "string"
        },
        "supported_targets": {
          "description": "The supported targets of this capability.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "Data": {
      "properties": {
        "category": {
          "description": "The data type. You can specify \"component\", \"log\", \"state\", and \"alarm\". The default is \"state\".\n",
          "enum": [
            "component",
            "log",
            "state",
            "alarm"
          ],
          "type": "string"
        },
        "device_id": {
          "description": "The universally unique identifier (UUID) of the device this data applies to.",
          "type": "string"
        },
        "id": {
          "description": "The name of the data.",
          "type": "string"
        },
        "recorded_on": {
          "description": "The timestamp of when the data was created. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        },
        "standard": {
          "description": "Reserved for future use.",
          "type": "string"
        },
        "values": {
          "description": "The key-value pairs of the recorded data. Nested data can be stored (keys with arrays or objects for example), however flat data can only be indexed.\n",
          "type": "object"
        }
      },
      "required": [
        "device_id",
        "recorded_on",
        "id",
        "values"
      ]
    },
    "DataCreateBulk": {
      "properties": {
        "category": {
          "description": "The data type. You can specify \"component\", \"log\", \"state\", and \"alarm\". The default is \"state\".\n",
          "enum": [
            "component",
            "log",
            "state",
            "alarm"
          ],
          "type": "string"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/DataCreateData"
          },
          "type": "array"
        },
        "standard": {
          "description": "Reserved for future use.",
          "type": "string"
        }
      },
      "required": [
        "data"
      ]
    },
    "DataCreateData": {
      "properties": {
        "id": {
          "description": "The name of the data.",
          "type": "string"
        },
        "recorded_on": {
          "description": "The timestamp of when the data was created. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        },
        "values": {
          "description": "The key-value pairs of the recorded data. Nested data can be stored (keys with arrays or objects for example).\n",
          "type": "object"
        }
      },
      "required": [
        "id",
        "recorded_on",
        "values"
      ]
    },
    "DataFilter": {
      "description": "The filter to use for the data in the notification.",
      "properties": {
        "category": {
          "description": "The data type that this policy applies to. You can specify \"component\", \"log\", \"state\", and \"alarm\". The default is \"state\".\n",
          "enum": [
            "component",
            "log",
            "state",
            "alarm"
          ],
          "type": "string"
        },
        "data_id": {
          "description": "The data identifier to monitor for changes on the specified 'device_id'. The identifier you choose is meaningful to your application.\n",
          "type": "string"
        },
        "device_id": {
          "description": "The universally unique identifier (UUID) of the device to monitor for changes.\n",
          "type": "string"
        },
        "standard": {
          "description": "Reserved for future use.\n",
          "type": "string"
        }
      },
      "required": [
        "device_id"
      ]
    },
    "DataRetention": {
      "properties": {
        "app_id": {
          "description": "The UUID of the application that the policy applies to.",
          "type": "string"
        },
        "category": {
          "description": "The data type that this policy applies to.\n",
          "enum": [
            "component",
            "log",
            "state",
            "alarm"
          ],
          "type": "string"
        },
        "id": {
          "description": "The UUID of the data retention policy.",
          "type": "string"
        },
        "name": {
          "description": "The name of the data.",
          "type": "string"
        },
        "retention": {
          "description": "The number of days to store the data. The string \"forever\" can be used to specify to store the data indefinitely; \"last_only\" means to store only the most recent piece of data.\n",
          "type": "string"
        },
        "standard": {
          "description": "Reserved for future use. The returned value is \"null\".",
          "type": "string"
        }
      },
      "required": [
        "id",
        "app_id",
        "category",
        "name",
        "retention"
      ]
    },
    "DataRetentionCreate": {
      "properties": {
        "category": {
          "description": "The data type that this policy applies to.\n",
          "enum": [
            "component",
            "log",
            "state",
            "alarm"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the data.",
          "type": "string"
        },
        "retention": {
          "description": "The number of days to store the data. The string \"forever\" can be used to specify to store the data indefinitely; \"last_only\" means to store only the most recent piece of data.\n",
          "type": "string"
        },
        "standard": {
          "description": "Reserved for future use.",
          "type": "string"
        }
      },
      "required": [
        "category",
        "name",
        "retention"
      ]
    },
    "DataRetentionUpdate": {
      "properties": {
        "category": {
          "description": "The data type that this policy applies to. You can specify \"component\", \"log\", \"state\", and \"alarm\". The default is \"state\".\n",
          "enum": [
            "component",
            "log",
            "state",
            "alarm"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the data.",
          "type": "string"
        },
        "retention": {
          "description": "The number of days to store the data. The string \"forever\" can be used to specify to store the data indefinitely; \"last_only\" means to store only the most recent piece of data.\n",
          "type": "string"
        },
        "standard": {
          "description": "Reserved for future use.",
          "type": "string"
        }
      }
    },
    "Device": {
      "properties": {
        "app_id": {
          "description": "The application&#39;s UUID that this device belongs to.",
          "type": "string"
        },
        "certificate": {
          "description": "The client certificate for authenticating this device. This value is returned only when a device is created with a certificate signing request.",
          "type": "string"
        },
        "created_on": {
          "description": "The timestamp of when the device was created. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "description": "A description (4-200 characters in length) of the device.",
          "type": "string"
        },
        "id": {
          "description": "The universally unique identifier (UUID) of the device.",
          "type": "string"
        },
        "identifier": {
          "description": "This string is a human-readable identifier (1-200 characters in length) for the device. For example a VIN number, MAC address, etc. This identifier differs from the universally unique identifier (UUID).\n",
          "type": "string"
        },
        "issuer": {
          "description": "The certificate issuer for this devices certificates used for authentication.",
          "type": "string"
        },
        "name": {
          "description": "The name (1-200 characters in length) of the device.",
          "type": "string"
        },
        "org_id": {
          "description": "The organization the device belongs to.",
          "type": "string"
        },
        "private_key": {
          "description": "(Deprecated) The RSA private key for the device. This value is passed in the response only when a device is created.",
          "type": "string"
        },
        "pub_key": {
          "description": "(Deprecated) The RSA public key of the device. This value is passed in the response only when a device is created.",
          "type": "string"
        },
        "tags": {
          "description": "An array containing the UUIDs of the tags created by the user.",
          "items": {
            "$ref": "#/definitions/DeviceTag"
          },
          "type": "array"
        },
        "user_id": {
          "description": "The UUID of the user associated with the device.",
          "type": "string"
        },
        "version_hash": {
          "description": "A hash of the version information. This value is available for \"component\" category.",
          "type": "string"
        }
      }
    },
    "DeviceCapability": {
      "properties": {
        "association": {
          "description": "The association to use. This call be an empty string or \"user\".",
          "type": "string"
        },
        "cap_name": {
          "description": "The capability name.",
          "type": "string"
        },
        "expires_on": {
          "description": "Whether the granted capability expires. If there is no expiry date, the value is \"null\".",
          "type": "string"
        },
        "granted_name": {
          "description": "The name of the entity that&#39;s being granted the capability.",
          "type": "string"
        },
        "granted_org_id": {
          "description": "The UUID of the organization that the granted entity belongs to.",
          "type": "string"
        },
        "granted_org_name": {
          "description": "The organization name of the application that&#39;s granted the capability.",
          "type": "string"
        },
        "granted_to": {
          "description": "The UUID of the entity that&#39;s granted the capability.",
          "type": "string"
        },
        "granted_type": {
          "description": "The type of entity that&#39;s that is granted the new capability. The values can be \"app\", \"device\", \"org\", \"tag\", or \"user\".",
          "type": "string"
        },
        "target_id": {
          "description": "The universally unique identifier (UUID) of what the capability grants permissions to.",
          "type": "string"
        },
        "target_name": {
          "description": "The name of the entity granting the capability.",
          "type": "string"
        },
        "target_type": {
          "description": "The entity type that the capability is granted on, called a target.",
          "type": "string"
        }
      },
      "required": [
        "target_id",
        "target_type",
        "cap_name",
        "granted_to",
        "granted_type"
      ]
    },
    "DeviceCreate": {
      "properties": {
        "app_id": {
          "description": "The application&#39;s UUID that this device belongs to.",
          "type": "string"
        },
        "csr": {
          "description": "The certificate signing request to use to create a client certificate, which can be used to authenticate access to this device.",
          "type": "string"
        },
        "description": {
          "description": "The description of the device.",
          "type": "string"
        },
        "identifier": {
          "description": "This string is a human-readable identifier for the device. For example a VIN number, MAC address, etc. This identifier differs from the UUID.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the device.",
          "type": "string"
        },
        "pub_key": {
          "description": "(Deprecated) The RSA public key of the device.",
          "type": "string"
        },
        "user_id": {
          "description": "The universally unique identifier( UUID) of the user associated with the device.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "app_id"
      ]
    },
    "DeviceCSR": {
      "properties": {
        "csr": {
          "description": "The PEM-encoded Certificate Signing Request (CSR).",
          "type": "string"
        }
      },
      "required": [
        "csr"
      ]
    },
    "DeviceTag": {
      "properties": {
        "tag_id": {
          "description": "The universally unique identifier (UUID) of the tag.",
          "type": "string"
        }
      }
    },
    "DeviceUpdate": {
      "properties": {
        "description": {
          "description": "The description of the device.",
          "type": "string"
        },
        "identifier": {
          "description": "This string is a human-readable identifier for the device. For example a VIN number, MAC address, etc. This identifier differs from the UUID.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the device.",
          "type": "string"
        },
        "pub_key": {
          "description": "(Deprecated) The RSA public key for the device.",
          "type": "string"
        },
        "user_id": {
          "description": "The UUID of the user that this device is associated with.",
          "type": "string"
        }
      }
    },
    "ElasticDSL": {},
    "ElasticResult": {
      "properties": {
        "hits": {
          "$ref": "#/definitions/HitSummary"
        },
        "timed_out": {
          "description": "A value of \"True\" if the query timed out; otherwise \"False\".\n",
          "type": "boolean"
        },
        "took": {
          "description": "The number of milliseconds that the request took to complete.\n",
          "type": "integer"
        }
      },
      "required": [
        "took",
        "timed_out",
        "hits"
      ]
    },
    "FileCapability": {
      "properties": {
        "association": {
          "description": "The association to use. This call be an empty string or \"user\".",
          "type": "string"
        },
        "cap_name": {
          "description": "The capability name.",
          "type": "string"
        },
        "expires_on": {
          "description": "Whether the granted capability expires. If there is no expiry date, the value is \"null\".",
          "type": "string"
        },
        "granted_name": {
          "description": "The name of the entity that&#39;s being granted the capability.",
          "type": "string"
        },
        "granted_org_id": {
          "description": "The UUID of the organization that the granted entity belongs to.",
          "type": "string"
        },
        "granted_org_name": {
          "description": "The organization name of the application that&#39;s granted the capability.",
          "type": "string"
        },
        "granted_to": {
          "description": "The UUID of the entity that&#39;s granted the capability.",
          "type": "string"
        },
        "granted_type": {
          "description": "The type of entity that&#39;s that is granted the new capability. The values can be \"app\", \"device\", \"org\", \"tag\", or \"user\".",
          "type": "string"
        },
        "target_id": {
          "description": "The universally unique identifier (UUID) of what the capability grants permissions to.",
          "type": "string"
        },
        "target_name": {
          "description": "The name of the entity granting the capability.",
          "type": "string"
        },
        "target_type": {
          "description": "The entity type that the capability is granted on, called a target.",
          "type": "string"
        }
      },
      "required": [
        "target_id",
        "target_type",
        "cap_name",
        "granted_to",
        "granted_type"
      ]
    },
    "FileFilter": {
      "description": "A filter for file notifications.",
      "properties": {
        "device_id": {
          "description": "The universally unique identifier (UUID) of the device to monitor for changes.\n",
          "type": "string"
        }
      }
    },
    "FileInfo": {
      "properties": {
        "created_on": {
          "description": "A timestamp of when the file was created on the system. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "description": "A description for the file.",
          "type": "string"
        },
        "download_url": {
          "description": "The HTTP URL to download the file. This property is only available if the file completely uploads.\n",
          "type": "string"
        },
        "filename": {
          "description": "The filename for the file. Paths can be encoded in the filename with slash (\"/\") characters to separate them.\n",
          "type": "string"
        },
        "id": {
          "description": "The universally unique identifier for the file.",
          "type": "string"
        },
        "metadata": {
          "description": "The JSON object containing metadata information about the file.\n",
          "type": "object"
        },
        "owner_id": {
          "description": "The UUID of the device that the file belongs to.\n",
          "type": "string"
        },
        "owner_type": {
          "description": "The type of entity the file belongs to. The only value that&#39;s valid is \"device\".\n",
          "type": "string"
        },
        "size": {
          "description": "The size of the file in bytes.",
          "type": "integer"
        },
        "uploaded_on": {
          "description": "A timestamp of when the file finished uploading. Returns null if the file doesn&#39;t completely upload. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "filename",
        "owner_id",
        "owner_type",
        "size",
        "created_on"
      ]
    },
    "FilesInfo": {
      "properties": {
        "created_on": {
          "description": "A timestamp of when the file was created on the system. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "description": "A description for the file.",
          "type": "string"
        },
        "filename": {
          "description": "The filename for the file. Paths can be encoded in the filename with slash (\"/\") characters to separate them.\n",
          "type": "string"
        },
        "id": {
          "description": "The universally unique identifier (UUID) for the file.",
          "type": "string"
        },
        "metadata": {
          "description": "The JSON object containing metadata information about the file.\n",
          "type": "object"
        },
        "owner_id": {
          "description": "The UUID of the device the file belongs to.\n",
          "type": "string"
        },
        "owner_type": {
          "description": "The type of entity the file belongs to. The only value that&#39;s valid is \"device\".\n",
          "type": "string"
        },
        "size": {
          "description": "The size of the file in bytes.",
          "type": "integer"
        },
        "uploaded_on": {
          "description": "A timestamp of when the file finished uploading. Returns null if the file doesn&#39;t completely upload. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "filename",
        "owner_id",
        "owner_type",
        "size",
        "created_on"
      ]
    },
    "FileUpdate": {
      "properties": {
        "description": {
          "description": "A description for the file.",
          "type": "string"
        },
        "metadata": {
          "description": "A metadata for the file.",
          "type": "object"
        }
      }
    },
    "Firehose": {
      "properties": {
        "description": {
          "description": "The description of the firehose, such as \"This firehose reports all events and data changes from devices of Application Type A\".\n",
          "type": "string"
        },
        "id": {
          "description": "The UUID of the firehose.",
          "type": "string"
        },
        "name": {
          "description": "The name of the firehose, such as \"Firehose for Application Type A\".",
          "type": "string"
        },
        "org_id": {
          "description": "The universally unique identifier (UUID) of the organization that the firehose belongs to.",
          "type": "string"
        }
      },
      "required": [
        "org_id",
        "name",
        "description",
        "id"
      ]
    },
    "FirehoseAck": {
      "properties": {
        "token": {
          "description": "A base64-encoded token used acknowledge a piece of event data that was received.",
          "type": "string"
        }
      },
      "required": [
        "token"
      ]
    },
    "FirehoseCapability": {
      "properties": {
        "cap_name": {
          "description": "The capability name.",
          "type": "string"
        },
        "granted_to": {
          "description": "The UUID of the entity that is granted the capability.",
          "type": "string"
        },
        "target_id": {
          "description": "The universally unique identifier (UUID) of what the capability grants permissions to.",
          "type": "string"
        }
      },
      "required": [
        "target_id",
        "cap_name",
        "granted_to"
      ]
    },
    "FirehoseCreate": {
      "properties": {
        "description": {
          "description": "The description of the firehose, such as \"This firehose reports all events and data changes from devices of Application Type A\".\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the firehose, such as \"Firehose for Application Type A\".",
          "type": "string"
        },
        "org_id": {
          "description": "The organization ID (UUID) of the organization on which you wish to create a firehose.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "FirehoseUpdate": {
      "properties": {
        "description": {
          "description": "The description of the firehose, such as \"This firehose reports all events and data changes from devices of Application Type A\".\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the firehose, such as \"Firehose for Application Type A\".",
          "type": "string"
        }
      }
    },
    "HitSummary": {
      "description": "Summary of information about the search results.\n",
      "properties": {
        "hits": {
          "description": "An array of documents that match the specified query.\n",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "total": {
          "description": "The total number of search results (specified by 'hits') that are found.\n",
          "type": "integer"
        }
      }
    },
    "Message": {
      "properties": {
        "created_on": {
          "description": "The timestamp when the message is received by the server. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        },
        "data": {
          "description": "The data of the message in JSON format. The object is application-defined and created by the sending device.\n",
          "type": "object"
        },
        "msg_id": {
          "description": "This identifier is the UUID of the message.\n",
          "type": "string"
        },
        "sender_id": {
          "description": "The universally unique identifier (UUID) of the sending device.",
          "type": "string"
        },
        "sent_on": {
          "description": "The timestamp when the message is sent by the device. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch. There can be situations when messages are sent long before the server receives them, such as when using a proxy.\n",
          "format": "int64",
          "type": "integer"
        },
        "target_id": {
          "description": "The UUID of the receiving or target device.",
          "type": "string"
        },
        "type": {
          "description": "The type of message is application-defined. For example, the message type could be message.create.wipe (to wipe the device), message.create.unlock (to unlock a door), or message.create.ping (to ping a device).\n",
          "type": "string"
        },
        "watermark_id": {
          "description": "This identifier represents where in the message queue this message lies. When you acknowledge the message with this identifier, the system removes the message and any older messages from the queue. You must acknowledge the 'watermark_id' to move forward in the message queue.\n",
          "type": "string"
        }
      },
      "required": [
        "target_id",
        "msg_id",
        "watermark_id"
      ]
    },
    "MessageAcknowledge": {
      "properties": {
        "watermark_id": {
          "description": "Each message contains an identifier. You can use that identifier to acknowledge all messages up to and including that message.\n",
          "type": "string"
        }
      }
    },
    "MessageCreate": {
      "properties": {
        "data": {
          "description": "The data of the message in JSON format. The object is application-defined and created by the sending device.\n",
          "type": "object"
        },
        "sent_on": {
          "description": "The timestamp when the message was sent by the device. This timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch. There can be situations when messages are sent long before the server receives them, such as when using a proxy.\n",
          "format": "int64",
          "type": "integer"
        },
        "target_id": {
          "description": "The UUID of the receiving or target device.",
          "type": "string"
        },
        "type": {
          "description": "The type of message is application-defined. For example, the message type could be message.create.wipe (to wipe the device), message.create.unlock (to unlock a door), or message.create.ping (to ping a device).\n",
          "type": "string"
        }
      },
      "required": [
        "type",
        "target_id",
        "data"
      ]
    },
    "MessageFilter": {
      "description": "A filter for the message.",
      "properties": {
        "type": {
          "description": "The message type to filter. The message type you specify is what you receive a notification for. If you filter for a message called message.create.ping, your would get a notification each time your device is sent a message of that type.\n",
          "type": "string"
        }
      }
    },
    "Notification": {
      "properties": {
        "action": {
          "description": "The action for the notification. A value of \"new\" specifies that there&#39;s a new notification or a new file was created. A value of \"delete\" specifies that a file was deleted.\n",
          "enum": [
            "new",
            "delete"
          ],
          "type": "string"
        },
        "data": {
          "description": "A JSON-formatted object that contains the notification information.\n",
          "type": "object"
        },
        "type": {
          "description": "The type of notification.\n",
          "enum": [
            "message",
            "data"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "action"
      ]
    },
    "NotificationFilter": {
      "description": "The filter to use for the notification.",
      "properties": {
        "data_filters": {
          "items": {
            "$ref": "#/definitions/DataFilter"
          },
          "type": "array"
        },
        "file_filters": {
          "items": {
            "$ref": "#/definitions/FileFilter"
          },
          "type": "array"
        },
        "message_filters": {
          "items": {
            "$ref": "#/definitions/MessageFilter"
          },
          "type": "array"
        }
      }
    },
    "Org": {
      "properties": {
        "id": {
          "description": "The universally unique identifier (UUID) of the organization.",
          "type": "string"
        },
        "name": {
          "description": "The name of the organization.",
          "type": "string"
        },
        "tags": {
          "description": "An array containing the UUIDs of the tags created by the user.",
          "items": {
            "$ref": "#/definitions/OrgTag"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ]
    },
    "OrgCapability": {
      "properties": {
        "cap_name": {
          "description": "The name of the capability.",
          "type": "string"
        },
        "granted_to": {
          "description": "The UUID of the entity that had been granted the capability.",
          "type": "string"
        },
        "target_id": {
          "description": "The universally unique identifier (UUID) of the target organization.",
          "type": "string"
        }
      },
      "required": [
        "target_id",
        "cap_name",
        "granted_to"
      ]
    },
    "OrgTag": {
      "properties": {
        "tag_id": {
          "description": "The universally unique identifier (UUID) of the tag.",
          "type": "string"
        }
      }
    },
    "Subscription": {
      "properties": {
        "event_filter": {
          "description": "This field narrows the stream to only data with this \"matching\" string.  Only applicable when the event_type is \"data\".\n",
          "type": "string"
        },
        "event_type": {
          "description": "This field determines which events are streamed.  Valid values are \"data\", \"file\", and \"lifecycle\". The life cycle events include create, delete, updates events for the scope type.\n",
          "type": "string"
        },
        "firehose_id": {
          "description": "The UUID of the firehose.",
          "type": "string"
        },
        "id": {
          "description": "The UUID of the subscription.",
          "type": "string"
        },
        "scope_id": {
          "description": "The UUID of the entity the subscription is scoped to.",
          "type": "string"
        },
        "scope_name": {
          "description": "The scope name.",
          "type": "string"
        },
        "scope_type": {
          "description": "The scope type.  Valid values are \"app\" and \"device\".",
          "type": "string"
        }
      },
      "required": [
        "id",
        "firehose_id",
        "scope_id",
        "scope_type",
        "event_type"
      ]
    },
    "SubscriptionCreate": {
      "properties": {
        "event_filter": {
          "description": "This field narrows the stream to only data with this \"matching\" string.  Only applicable when the event_type is \"data\".\n",
          "type": "string"
        },
        "event_type": {
          "description": "This field determines which events are streamed.  Valid values are \"data\", \"file\", \"lifecycle\", and \"*\". The life cycle events include create, delete, updates events for the scope type.\n",
          "type": "string"
        },
        "scope_id": {
          "description": "The UUID of the entity the subscription is scoped to.",
          "type": "string"
        },
        "scope_type": {
          "description": "The scope type.  Valid values are \"app\" and \"device\".",
          "type": "string"
        }
      },
      "required": [
        "scope_id",
        "scope_type",
        "event_type"
      ]
    },
    "Tag": {
      "properties": {
        "color": {
          "description": "A color for the tag. The color is specified as hex triplet and starts with a hash character. For more information about values you can use, see http://en.wikipedia.org/wiki/Web_colors.\n",
          "type": "string"
        },
        "description": {
          "description": "A description about the tag that users and administrators can see.\n",
          "type": "string"
        },
        "exposing": {
          "description": "An immutable value specified at creation time of the tag.  When \"True\", the tag can be designated as the target of granted capabilities, which is known as an exposing tag. When \"False\", the tag can&#39;t be the target of a capability, which is known as a non-exposing tag. If no value is specified, the default value is \"True\".\n",
          "type": "boolean"
        },
        "id": {
          "description": "The universally unique identifier (UUID) of the tag.",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag. This name doesn&#39;t need to be unique. Often, this name appears on the application screens to end users. For example, when you create your organization, a tag with the name of Admin is created. The user that created the organization is assigned the Admin tag.\n",
          "type": "string"
        },
        "owner_id": {
          "description": "The owner of the tag.  The owner is identified by the UUID of the organization or user.\n",
          "type": "string"
        },
        "owner_type": {
          "description": "Tags can be owned and managed by a user or by an organization. Typically, organizations create the first set of rules across their applications and can delegate some of the permission management down to the end users (e.g., users can share their location if they want to). In cases where users manage the permissions, the owner would be the user, otherwise the owner is the organization (\"org\").\n",
          "enum": [
            "org",
            "user"
          ],
          "type": "string"
        }
      },
      "required": [
        "name",
        "description",
        "owner_type",
        "owner_id",
        "id",
        "exposing"
      ]
    },
    "TagCapability": {
      "properties": {
        "association": {
          "description": "The capability association type. The association type can be \"same_user\", which indicates to grant the capability to devices that belong to the same user.\n",
          "type": "string"
        },
        "cap_name": {
          "description": "The name of the capability.\n",
          "type": "string"
        },
        "granted_name": {
          "description": "The name of the entity that you have granted the capability to. The entity is specified in the 'granted_to' parameter.",
          "type": "string"
        },
        "granted_org_id": {
          "description": "The UUID of the organization which the entity belongs to. The entity is specified in the 'granted_to' parameter.",
          "type": "string"
        },
        "granted_org_name": {
          "description": "The name of the organization which the entity belongs to. The entity is specified in the 'granted_to' parameter.",
          "type": "string"
        },
        "granted_to": {
          "description": "The UUID of the entity to grant the capability to.\n",
          "type": "string"
        },
        "granted_type": {
          "description": "The type of entity the capability is granted to.",
          "type": "string"
        },
        "target_id": {
          "description": "The universally unique identifier (UUID) of the entity granting the capability to perform an action on it.\n",
          "type": "string"
        },
        "target_name": {
          "description": "The name of the tag that you are granting the capability on.",
          "type": "string"
        },
        "target_type": {
          "description": "The type of entity that&#39;s being granted the capability. This value should be \"tag\" (tags).\n",
          "type": "string"
        }
      },
      "required": [
        "target_id",
        "cap_name",
        "granted_to",
        "granted_type",
        "target_type"
      ]
    },
    "TagCreate": {
      "properties": {
        "color": {
          "description": "A color for the tag. The color is specified as hex triplet and starts with a hash character. If no value is specified, the default value is \"#000000\" (black). For more information about the values you can use, see http://en.wikipedia.org/wiki/Web_colors.\n",
          "type": "string"
        },
        "description": {
          "description": "A description about the tag that users and administrators can see. The description must be 4-200 characters in length.\n",
          "type": "string"
        },
        "exposing": {
          "description": "An immutable value specified at creation time of the tag. When \"True\", the tag can be designated as the target of granted capabilities, which is known as an exposing tag. When \"False\", the tag can&#39;t be the target of a capability, which is known as a non-exposing tag. The advantage of using a non-exposing tag is that no additional capabilities are required. If no value is specified, the default value is \"True\".\n",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the tag. This name doesn&#39;t need to be unique. Often, this name appears on the application screens to end users. For example, when you create your organization, a tag with the name of Admin is created. The user that created the organization is assigned the Admin tag.\n",
          "type": "string"
        },
        "owner_id": {
          "description": "The owner of the tag.  The owner is identified by the UUID of the organization or user. If this value isn&#39;t provided, it is determined by the caller&#39;s organization or user in the 'owner_type' property.\n",
          "type": "string"
        },
        "owner_type": {
          "description": "Tags can be owned and managed by a user or by an organization. Typically, organizations create the first set of rules across their applications and can delegate some of the permission management down to the end users (e.g., users can share their location if they want to). In cases where users manage the permissions, the owner would be the user (\"user\"); otherwise, the owner is the organization (\"org\").\n",
          "enum": [
            "org",
            "user"
          ],
          "type": "string"
        }
      },
      "required": [
        "owner_type",
        "name",
        "description"
      ]
    },
    "TagEntity": {
      "properties": {
        "tag_id": {
          "description": "The universally unique identifier (UUID) of tag.\n",
          "type": "string"
        },
        "tagged_id": {
          "description": "The universally unique identifier (UUID) of the entity that is tagged with this tag.\n",
          "type": "string"
        },
        "type": {
          "description": "The type of entity.\n",
          "type": "string"
        }
      },
      "required": [
        "tag_id",
        "tagged_id",
        "type"
      ]
    },
    "TagUpdate": {
      "properties": {
        "color": {
          "description": "A color for the tag. The color is specified as hex triplet and starts with a hash character. For more information about values you can use, see http://en.wikipedia.org/wiki/Web_colors.\n",
          "type": "string"
        },
        "description": {
          "description": "A description about the tag that users and administrators can see.\n",
          "type": "string"
        },
        "name": {
          "description": "The name of the tag. This name doesn&#39;t need to be unique. Often, this name appears on the application screens to end users. For example, when you create your organization, a tag with the name of Admin is created. The user that created the organization is assigned the Admin tag.\n",
          "type": "string"
        }
      }
    },
    "User": {
      "properties": {
        "created_on": {
          "description": "The timestamp of when the user was created. The timestamp is a 64-bit integer that represents the number of milliseconds since UNIX epoch.\n",
          "format": "int64",
          "type": "integer"
        },
        "email": {
          "description": "The email address of the user. This email addressed is used to sign in to the system.",
          "type": "string"
        },
        "id": {
          "description": "The universally unique identifier (UUID) for the user.",
          "type": "string"
        },
        "orgs": {
          "description": "An array containing the UUIDs of the organizations the user belongs to.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tags": {
          "description": "An array containing the UUIDs of the tags created by the user.",
          "items": {
            "$ref": "#/definitions/UserTag"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "email",
        "created_on"
      ]
    },
    "UserCapability": {
      "properties": {
        "cap_name": {
          "description": "The capability name.",
          "type": "string"
        },
        "granted_to": {
          "description": "The universally unique identifier (UUID) of the entity that has been granted a capability.",
          "type": "string"
        },
        "target_id": {
          "description": "The name of the user capability.",
          "type": "string"
        }
      },
      "required": [
        "target_id",
        "cap_name",
        "granted_to"
      ]
    },
    "UserProfile": {
      "properties": {
        "first_name": {
          "description": "A first name of the user.",
          "type": "string"
        },
        "last_name": {
          "description": "The surname of the user.",
          "type": "string"
        },
        "user_id": {
          "description": "The universally unique identifier (UUID) for the user.",
          "type": "string"
        }
      },
      "required": [
        "user_id",
        "first_name",
        "last_name"
      ]
    },
    "UserTag": {
      "properties": {
        "tag_id": {
          "description": "The universally unique identifier (UUID) of the tag.",
          "type": "string"
        }
      }
    }
  },
  "host": "iot.blackberry.com",
  "info": {
    "title": "BlackBerry IoT Platform REST API",
    "version": "1.0.0",
    "x-origin": {
      "format": "swagger",
      "url": "https://iot.blackberry.com/api/1/api-docs",
      "version": "1.2"
    },
    "x-providerName": "blackberry.com"
  },
  "paths": {
    "/apps": {
      "get": {
        "description": "Retrieve a list of applications that belong to an organization ('org_id') or that have a specific API KEY ('api_key'). The calling device requires the app.read.by.org capability on the organization and app.read capability on the applications being listed. Don&#39;t provide both 'org_id' and 'api_key' parameters, otherwise you get a 400 response (bad request).\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the organization to get applications from.",
            "in": "query",
            "name": "org_id",
            "type": "string"
          },
          {
            "description": "The application&#39;s API KEY for a single application query.",
            "in": "query",
            "name": "api_key",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/App"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of applications",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Devices are instances of applications that are used to connect into the system. In most cases, you would have a different application for each type of device that connects to the system. When you use this API, you can create an application. To be able to call this method, the calling device requires the app.create capability on the specified organization ('org_id').\n",
        "parameters": [
          {
            "description": "The JSON-formatted string containing information about the application to create.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        },
        "summary": "Create an application",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/{id}": {
      "delete": {
        "description": "Remove an application from the system. In addition to removing the application, this call causes all the devices for the specified application and the associated data for the devices to be removed from the system. The calling device must have the app.delete capability on the specified application to perform the action.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Delete an application",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "Read a single application based on its universally unique identifier (UUID). To be able to read an application, the calling device must have the app.read capability for the specified application.\n",
        "parameters": [
          {
            "description": "The application UUID to read.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        },
        "summary": "Read an application",
        "tags": [
          "apps"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update the metadata for an application. The calling device requires the app.update capability for the specified application.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The JSON-formatted string containing information about the application to update.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Update an application",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/{id}/caps": {
      "get": {
        "description": "Retrieve the list of capabilities. You can retrieve either the capabilities that this application has on other entities, or the capabilities that other entities have been granted on this application. Capabilities grant entities the permissions to perform certain actions on the system. Devices inherit all the capabilities of an application. The calling device must have the cap.read permission on the specified application to perform this action.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of query to get a list for. You can specify \"has\" to get all the capabilities that the specified application has on other entities in the system. Otherwise, you can specify \"grants\", to get a list of all the capabilities that other entities have on this application. The default value of \"grants\" is used if no value is specified.\n",
            "enum": [
              "has",
              "grants"
            ],
            "in": "query",
            "name": "cap_type",
            "type": "string"
          },
          {
            "description": "Applications can inherit permissions from other entities, such as tags and organizations. Tags can be applied to the application and applications can belong to an organization. If you specify 'inherit' as \"True\", all the capabilities that are inherited are also returned. The default value of \"False\" is used if no value is specified.\n",
            "in": "query",
            "name": "inherit",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/AppCapability"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the capabilities for an application",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/{id}/caps/{cap_name}/{granted_to}": {
      "delete": {
        "description": "Remove a capability from an entity (specified using 'granted_to') on the specified application. The calling device must have the cap.delete capability on the specified application to remove a capability.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application to remove the capability from.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability to remove.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that the capability is being removed from.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The capability association type. The association type can be \"same_user\", which\n  indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Revoke a capability from the application",
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "Grant a capability to an entity. The created capability allows actions to be performed on the specified application. Use this method to give permissions to other entities in the system to perform actions to the specified application. The calling device must have the cap.create capability on the specified application. You can use the \"List all the capabilities\" from the Capabilities REST API (https://iot.blackberry.com/restdoc/#!/caps/list) to determine the valid strings that you can use.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that&#39;s being granted the created capability.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of entity that is being granted the created capability. The types can be \"org\" (organizations), \"app\" (applications), \"device\" (devices), \"user\" (users), and \"tag\" (tags).\n",
            "enum": [
              "app",
              "device",
              "org",
              "tag",
              "user"
            ],
            "in": "query",
            "name": "granted_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The capability association type. The association type can be \"same_user\", which\n indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "type": "string"
          },
          {
            "description": "The timestamp that indicates when the capability expires. Timestamps are 64-bit integers that represents the number of milliseconds since UNIX epoch. This number cannot be greater than 8640000000000000 (Sat, 13 Sep 275760 00:00:00 GMT).\n",
            "format": "int64",
            "in": "query",
            "name": "expires_on",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/AppCapability"
            }
          }
        },
        "summary": "Grant a capability on an application",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/{id}/data_retentions": {
      "get": {
        "description": "Return all the data retention policies for the specified application. Data retention policies describe what data should be indexed and how long that data should be retained in the system. The calling device must have the data.retention.read capability for the specified application.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/DataRetention"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the data retention policies",
        "tags": [
          "apps"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a data retention policy in the system. Data retention policies describe what data should be indexed and how long that data should be retained in the system. The calling device must have the data.retention.create capability on the specified application.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The JSON-formatted string containing information about the data-retention policy to create.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataRetentionCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/DataRetention"
            }
          }
        },
        "summary": "Create a data retention policy",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/{id}/data_retentions/{data_retention_id}": {
      "delete": {
        "description": "Delete a data retention policy from the system. Data retention policies describe what data should be  indexed and how long that data should be retained in the system. The calling device must have the data.retention.delete capability for the specified application.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the data retention policy.",
            "in": "path",
            "name": "data_retention_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Delete a data retention policy",
        "tags": [
          "apps"
        ]
      },
      "get": {
        "description": "Read a single data retention policy. Data retention policies describe what data should be indexed and how long that data should be retained in the system. The calling device must have the data.retention.read permission for the specified application.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the data retention policy.",
            "in": "path",
            "name": "data_retention_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/DataRetention"
            }
          }
        },
        "summary": "Read a data retention policy",
        "tags": [
          "apps"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a data retention policy with new policy settings. Data retention policies describe what data should be indexed and how long that data should be retained in the system. The calling device must have the data.retention.update permission for the specified application.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the data retention policy.",
            "in": "path",
            "name": "data_retention_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The JSON-formatted string containing information about the data-retention policy to update.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataRetentionUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Update a data retention policy",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/{id}/keys": {
      "get": {
        "description": "Read a single application API KEY and API SECRET based on its universally unique identifier (UUID). To read the key and secret, the calling device must have the app.read.keys capability on the specified application.\n",
        "parameters": [
          {
            "description": "The UUID of the application to read.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/AppKeys"
            }
          }
        },
        "summary": "Read an application API KEY and API SECRET",
        "tags": [
          "apps"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update the API KEY and API SECRET for an application. The calling device must have the app.update.keys capability for the specified application.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The JSON-formatted string containing the API SECRET and API KEY to update the application with.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppKeys"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Update an application API KEY and API SECRET",
        "tags": [
          "apps"
        ]
      }
    },
    "/apps/{id}/tags/{tag_id}": {
      "delete": {
        "description": "Remove a tag from an application. The calling device must have the app.untag capability for the specified application and the tag.grant capability for the specified tag.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application to remove the tag from.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the tag to remove from the application.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Remove a tag from an application",
        "tags": [
          "apps"
        ]
      },
      "put": {
        "description": "Add an existing tag to an application. Before making this call, the specified tag must be created. After the tag is created, it can be applied to an application. The calling device must have the app.tag capability for the specified application and the tag.grant capability for the specified tag.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the application to apply the tag to.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the tag to apply to the application.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Add a tag to an application",
        "tags": [
          "apps"
        ]
      }
    },
    "/caps": {
      "get": {
        "description": "Get the list of capabilities. This list contains the action name, the display name, and the supported targets. This list contains only system-defined capabilities and doesn&#39;t contain user-created capabilities. Since user-defined capabilities are application-specific, there is no available mechanism to discover user-defined capabilities. However, if your user-defined capabilities are granted on an entity, you can find the user-defined capabilities using the GET operation to retrieve the list of capabilities on any entity. For example, if you have an application that grants a user-defined permission, you can use the GET operation (List the capabilities for an application) and the UUID of the application to retrieve the list capabilities, which includes both system-defined and user-defined capabilities. You can use 'target_type' to determine which capabilities can be applied to a target. For example, set the 'target_type' to \"file\" to get the capabilities that a file entity can grant to other entities.\nNo special capabilities are required to perform this operation.\n",
        "parameters": [
          {
            "description": "The target entity that the capability supports. The valid values you can enter include: \"org\" (organization), \"app\" (application), \"device\" (devices), \"user\" (users), \"tag\" (tags), and \"firehose\" (firehoses). You can also use \"association\" to determine the capabilities that can be granted as an association.\n",
            "in": "query",
            "name": "target_type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/Cap"
              },
              "type": "array"
            }
          }
        },
        "summary": "List all system-defined capabilities",
        "tags": [
          "caps"
        ]
      }
    },
    "/devices": {
      "get": {
        "description": "Return all the devices that are associated with the specified user. Without any additional capabilities, a user can always retrieve the list of devices that their UUID is associated with. For users to retrieve a list of devices associated with another user, they must be granted the device.read.by.user capability to perform this operation. For example, if you grant another user entity the device.read.by.user capability, the capability permits the other user to retrieve the list of devices that are associated with your UUID.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the user to query devices for. If this parameter is not provided, for user-based authenticated devices, the UUID of associated user from the device is used. For device-based authenticated devices, if no UUID is specified, a 400 error is returned.\n",
            "in": "query",
            "name": "user_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/Device"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the devices belonging to a user",
        "tags": [
          "devices"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Call this method to create a device.  If you have a manufacturing line, you can automate the process of creating devices using this method. The calling device must have the device.create capability for the application that the new device is being created on.\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeviceCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        },
        "summary": "Create a device",
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}": {
      "delete": {
        "description": "Delete a device from the system. This call also deletes all associated data with the device (i.e., logs, states, etc). The calling device must have device.delete to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to delete.  The calling device must have the device.delete capability on the specified device.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Delete a device",
        "tags": [
          "devices"
        ]
      },
      "get": {
        "description": "Read a device to get its associated metadata. The calling device must have the device.read capability on the target device.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to read.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        },
        "summary": "Read a device",
        "tags": [
          "devices"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update the metadata for a device. The calling device must have the device.update capability for the specified device.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeviceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Update a device&#39;s metadata",
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}/caps": {
      "get": {
        "description": "Retrieve the list of capabilities. You can retrieve either the capabilities that this device has on other entities, or the capabilities that other entities has been granted on this device. Capabilities grant entities the permissions to perform certain actions on the system. Devices inherit all the capabilities of an application. The calling device must have the cap.read permission on the specified application to perform this action.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to retrieve capabilities from.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of query to get a list for. You can specify \"has\" to get all the capabilities that the specified application has on other entities in the system. Otherwise, you can specify \"grants\", to get a list of all the capabilities that other entities have on this application. The default value of \"grants\" is used if no value is specified.\n",
            "enum": [
              "has",
              "grants"
            ],
            "in": "query",
            "name": "cap_type",
            "type": "string"
          },
          {
            "description": "Applications can inherit permissions from other entities, such as tags and organizations. Tags can be applied to the application and applications can belong to an organization. If you specify 'inherit' as \"True\", all the capabilities that are inherited are also returned. The default value of \"False\" is used if no value is specified.\n",
            "in": "query",
            "name": "inherit",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/DeviceCapability"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the capabilities for a device",
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}/caps/{cap_name}/{granted_to}": {
      "delete": {
        "description": "Revoke a capability that an entity ('granted_to') has been granted to perform on the specified device. The calling device requires the cap.delete capability on the specified device.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) that the 'granted_to' entity has permissions on.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that has the granted permission.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The capability association type. The association type can be \"same_user\", which\n indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Revoke a capability from a device",
        "tags": [
          "devices"
        ]
      },
      "put": {
        "description": "Grant a capability to an entity. The created capability allows actions to be performed on the specified device. Use this method to give permissions to other entities in the system to perform actions to the specified device. The calling device must have the cap.create capability on the specified device.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to grant capabilities on.  Note that this device doesn&#39;t retrieve the capability. Capabilities are granted using 'granted_to' to perform actions on this UUID.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity to grant the permission to.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of entity that&#39;s being granted the capability. The types can be \"org\" (organizations), \"app\" (applications), \"device\" (devices), \"user\" (users), or \"tag\" (tags).\n",
            "enum": [
              "app",
              "device",
              "org",
              "tag",
              "user"
            ],
            "in": "query",
            "name": "granted_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The capability association type. The association type can be \"same_user\", which\n indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "type": "string"
          },
          {
            "description": "The timestamp that indicates when the capability expires. Timestamps are 64-bit integers that represents the number of milliseconds since UNIX epoch. This number cannot be greater than 8640000000000000 (Sat, 13 Sep 275760 00:00:00 GMT).\n",
            "format": "int64",
            "in": "query",
            "name": "expires_on",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/DeviceCapability"
            }
          }
        },
        "summary": "Grant a capability on a device",
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}/certificates": {
      "get": {
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to get the list of certificates for. The device.read capability is required to perform this operation. The caller must have the device.read capability to perform this operation.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Get the list of certificates associated with a device",
        "tags": [
          "devices"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This method takes a Certificate Signing Request (CSR) and returns a certificate, which can be used to authenticate as this device. The caller must have the device.update capability to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to associate this certificate with.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The PEM-encoded CSR. The value you provide must be valid JSON. For the CSR, you must include the newline character (\"\\n\") to separate the lines of the CSR.\n",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeviceCSR"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Sign a certificate request for a device",
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}/certificates/{serial_number}": {
      "delete": {
        "description": "This method revokes a certificate (identified by its serial number) that&#39;s associated with the device. After a certificate has been revoked, it can&#39;t be used to authenticate the device. The device.update capability is required to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to revoke a certificate from.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The serial number of the certificate to revoke.\n",
            "in": "path",
            "name": "serial_number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Revoke a certificate for a device",
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}/data": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Allow a device to store data on the system associated with it. The data is provided in bulk format with 1-100 data points allowed. No capabilities are required to create the data, but devices can create data only for themselves.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to associate this data with.  Currently, this can be only the same as the calling device. An error is returned if the device ID doesn&#39;t match the one assigned to the access token that&#39;s used.\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DataCreateBulk"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Create a data object",
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}/data/{data_id}": {
      "delete": {
        "description": "Delete the named data object of a device. Calling devices can always delete data on themselves.  To delete data on other devices, the calling device must have the data.delete capability on the target device.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to delete data from.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Object name of the data object.",
            "in": "path",
            "name": "data_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Reserved for future use.",
            "in": "query",
            "name": "standard",
            "type": "string"
          },
          {
            "description": "The type of object. You can specify \"component\", \"log\", \"state\", and \"alarm\". The default is \"state\".\n",
            "enum": [
              "component",
              "log",
              "state",
              "alarm"
            ],
            "in": "query",
            "name": "category",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Delete a data object from a device",
        "tags": [
          "devices"
        ]
      },
      "get": {
        "description": "Return the named data for a device. Devices can read their own data. To read the data of other devices, the caller must have the data.read capability on the target device.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to read from.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the data object.",
            "in": "path",
            "name": "data_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Reserved for future use.",
            "in": "query",
            "name": "standard",
            "type": "string"
          },
          {
            "description": "The data type that this data applies to. The default is \"state\".\n",
            "enum": [
              "component",
              "log",
              "state",
              "alarm"
            ],
            "in": "query",
            "name": "category",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Data"
            }
          }
        },
        "summary": "Read a data object",
        "tags": [
          "devices"
        ]
      }
    },
    "/devices/{id}/tags/{tag_id}": {
      "delete": {
        "description": "Remove a previously associated tag from a device. To be able to call this method, the calling device must have the device.untag capability on the specified device and the tag.grant capability on the specified tag.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to tag",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the tag to apply to the specified device.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Remove a tag from a device",
        "tags": [
          "devices"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an existing tag to the specified device. To use this method, the calling device must have the device.tag capability on the specified device and the tag.grant capability on the specified tag.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to tag.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the tag to apply to the device.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Add a tag to a device",
        "tags": [
          "devices"
        ]
      }
    },
    "/files": {
      "get": {
        "description": "Returns the filename, universally unique identifiers (UUIDs) of files, and other information about the files associated with the device. The calling device must have the file.read permission to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to get files listed under.\n",
            "in": "query",
            "name": "device_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/FilesInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve a list of files",
        "tags": [
          "files"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "description": "Create a file object in the system. You provide the file as part multipart form data with this method. Files receive a universally unique identifier (UUID) that identifies the file in the system. The calling device must have the file.create capability to perform  this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the device to create a file for. If you don&#39;t provide a UUID, the file that&#39;s created from this method is associated with the UUID  of the calling device.\n",
            "in": "formData",
            "name": "device_id",
            "type": "string"
          },
          {
            "description": "A description of the file.",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Metadata can be set to JSON containing meta data information about the file.\n",
            "in": "formData",
            "name": "metadata",
            "type": "string"
          },
          {
            "description": "The size, in bytes, of the file. If this parameter isn&#39;t provided, an attempt to calculate the size of the file is made. This calculated size may not be accurate, which is why it&#39;s a good practice for you to supply the exact size.\n",
            "in": "formData",
            "name": "size",
            "type": "integer"
          },
          {
            "description": "The file to upload.",
            "in": "formData",
            "name": "filepath",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/FilesInfo"
            }
          }
        },
        "summary": "Create a file",
        "tags": [
          "files"
        ]
      }
    },
    "/files/{id}": {
      "delete": {
        "description": "Delete a previously created file. The calling device must have the file.delete capability on the specified file to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the file.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Delete a file",
        "tags": [
          "files"
        ]
      },
      "get": {
        "description": "Get information about a file using its universally unique identifier (UUID). The UUID for the file that can be shared with others. Information about the file includes the URL where to download the file, the filename, description of the file, when the file was created and uploaded, the size of the file, and any metadata to describe the file. The calling device must have the file.read capability to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the file.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/FileInfo"
            }
          }
        },
        "summary": "Retrieve the information about a file",
        "tags": [
          "files"
        ]
      },
      "put": {
        "description": "Update the metadata relating to a file. It isn&#39;t possible to change the file content directly. To change the file content, delete the file and recreate the file. The calling device must have the file.update capability on the specified file to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the file.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The JSON-formatted string containing metadata to update.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FileUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Update the metadata for a file",
        "tags": [
          "files"
        ]
      }
    },
    "/files/{id}/caps": {
      "get": {
        "description": "Retrieve the list of capabilities that other entities have been granted on this file. The calling device must have the cap.read capability on the specified file to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the file.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/FileCapability"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the capabilities for a file",
        "tags": [
          "files"
        ]
      }
    },
    "/files/{id}/caps/{cap_name}/{granted_to}": {
      "delete": {
        "description": "Remove a capability from an entity (granted_to) on the specified universally unique identifier (UUID) of the file. To be able to remove a capability, the calling device must have the cap.delete capability on the specified UUID of the file.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) to remove the capability from.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability to remove.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that the capability is being removed from.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The capability association type. The association type can be \"same_user\", which indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Revoke a capability from a file",
        "tags": [
          "files"
        ]
      },
      "put": {
        "description": "Grant a capability to an entity. The created capability allows operations to be performed on the specified file. Use this method to give capabilities to other entities in the system to perform operations on the specified file. The calling device must have the cap.create capability on the specified file. You can use the \"List all the capabilities\" from the Capabilities REST API (https://iot.blackberry.com/restdoc/#!/caps/list) to determine the valid capabilities that you can use.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the file.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity to grant the permission to.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of entity that&#39;s being granted. The types can be \"org\" (organizations), \"app\" (applications), \"device\" (devices), \"user\" (users), and \"tag\" (tags).\n",
            "enum": [
              "app",
              "device",
              "org",
              "tag",
              "user"
            ],
            "in": "query",
            "name": "granted_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The capability association type.",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "type": "string"
          },
          {
            "description": "The timestamp that indicates when the capability expires. Timestamps are 64-bit integers that represents the number of milliseconds since UNIX epoch. This number cannot be greater than 8640000000000000 (Sat, 13 Sep 275760 00:00:00 GMT).\n",
            "format": "int64",
            "in": "query",
            "name": "expires_on",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/FileCapability"
            }
          }
        },
        "summary": "Grant a capability on a file",
        "tags": [
          "files"
        ]
      }
    },
    "/files/{id}/content": {
      "get": {
        "description": "Return a 302, with the location of the content as the location header.\n For redirects, an error may occur if the client does not remove the\n authorization header. When this error occurs, use the 'download_url'\n value from the GET /files{id} route.  The calling device must have the file.read\n capability on the specified file to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the file.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Download the file contents",
        "tags": [
          "files"
        ]
      }
    },
    "/firehoses": {
      "get": {
        "description": "Read a list of firehoses belonging to an organization. The calling device must have the firehose.list capability on the organization.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the organization from which to get the list of firehoses.",
            "in": "query",
            "name": "org_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/Firehose"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve a list of firehoses belonging to an organization",
        "tags": [
          "firehoses"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a data pipe that stream events and data from devices. The calling device must have the firehose.create capability on the organization.\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FirehoseCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Firehose"
            }
          }
        },
        "summary": "Create a firehose",
        "tags": [
          "firehoses"
        ]
      }
    },
    "/firehoses/{id}": {
      "delete": {
        "description": "Remove a firehose from the system. In addition to removing the firehose, this call causes all the subscriptions for the specified firehose to be removed from the system. The calling device must have the firehose.delete capability on the organization.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Delete a firehose",
        "tags": [
          "firehoses"
        ]
      },
      "get": {
        "description": "Read a single firehose based on its universally unique identifier (UUID). The calling device must have the firehose.read capability on the organization.\n",
        "parameters": [
          {
            "description": "The firehose UUID to read",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Firehose"
            }
          }
        },
        "summary": "Read a firehose",
        "tags": [
          "firehoses"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update the metadata for a firehose. The calling device must have the firehose.update capability on the organization.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FirehoseUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Update the metadata for a firehose",
        "tags": [
          "firehoses"
        ]
      }
    },
    "/firehoses/{id}/caps": {
      "get": {
        "description": "Retrieve the entities (organizations, applications, users, devices and tags) that have been granted the firehose.attach capability. This capability permits devices to attach and consume event data from the firehose.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/FirehoseCapability"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the entities that have been granted access to the firehose",
        "tags": [
          "firehoses"
        ]
      }
    },
    "/firehoses/{id}/caps/{cap_name}/{granted_to}": {
      "delete": {
        "description": "Remove a capability from an entity (specified using 'granted_to') on the specified firehose. The calling device must have the cap.delete capability on the specified firehose to remove a capability.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose to remove the capability from.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability to remove.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that the capability is being removed from.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Revoke a capability from the firehose",
        "tags": [
          "firehoses"
        ]
      },
      "put": {
        "description": "Grant a capability to an entity. The created capability allows actions to be performed on the specified firehose. Use this method to give permissions to other entities in the system to perform actions to the specified firehose. The calling device must have the cap.create capability on the specified firehose.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that is being granted the capability.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of entity that is being granted the capability. The types can be \"org\" (organizations), \"app\" (applications), \"device\" (devices), \"user\" (users), and \"tag\" (tags).\n",
            "enum": [
              "app",
              "device",
              "org",
              "tag",
              "user"
            ],
            "in": "query",
            "name": "granted_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The timestamp that indicates when the capability expires. Timestamps are 64-bit integers that represents the number of milliseconds since UNIX epoch. This number cannot be greater than 8640000000000000 (Sat, 13 Sep 275760 00:00:00 GMT).\n",
            "format": "int64",
            "in": "query",
            "name": "expires_on",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Grant a capability on a firehose",
        "tags": [
          "firehoses"
        ]
      }
    },
    "/firehoses/{id}/data": {
      "get": {
        "description": "Begins streaming from the specified firehose. The calling device must have the firehose.attach capability.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Attach to a firehose",
        "tags": [
          "firehoses"
        ]
      }
    },
    "/firehoses/{id}/subscriptions": {
      "get": {
        "description": "Returns all the subscriptions for the specified firehose. The calling device must have the firehose.subscription.list capability on the organization.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/Subscription"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the subscriptions of a firehose",
        "tags": [
          "firehoses"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a subscription for a firehose. Firehose subscriptions describe what data is streamed to the recipient. The calling device must have the firehose.subscription.create capability on the organization.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "summary": "Create a subscription",
        "tags": [
          "firehoses"
        ]
      }
    },
    "/firehoses/{id}/subscriptions/{subscription_id}": {
      "delete": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Deletes a subscription from firehose. The calling device must have the firehose.subscription.delete capability for the organization.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the subscription",
            "in": "path",
            "name": "subscription_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Delete a subscription",
        "tags": [
          "firehoses"
        ]
      },
      "get": {
        "description": "Reads a single firehose subscription. The calling device must have the firehose.subscription.read capability on the organization.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the subscription",
            "in": "path",
            "name": "subscription_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "summary": "Read a subscription",
        "tags": [
          "firehoses"
        ]
      }
    },
    "/firehoses/{id}/token": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Acknowledge the point of event data that is received on a firehose using a token. The token specifies the starting point of where to start sending event data if the device later reconnects.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the firehose.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FirehoseAck"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Acknowledge data received from a firehose",
        "tags": [
          "firehoses"
        ]
      }
    },
    "/messages": {
      "get": {
        "description": "Return the first 'limit' number of messages waiting to be delivered (not acknowledged) to the authenticated device. No capabilities are required for this action, devices can always retrieve their own messages.\n",
        "parameters": [
          {
            "description": "The maximum number of messages to return. You can specify a range of 1-25.\n",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/Message"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve messages for the authenticated device",
        "tags": [
          "messages"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Send a message from the authenticated device to another device. The authenticated device requires the message.create.<message_type> capability (where message_type is application-specific) for the target device. For example, to send the message.create.wipe message, the device that sends the message must be granted the message.create.wipe capability on the target device.\n",
        "parameters": [
          {
            "description": "The JSON-formatted string containing message information.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MessageCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "summary": "Send a message to a device",
        "tags": [
          "messages"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Acknowledge received messages up to the watermark.\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/MessageAcknowledge"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Acknowledge received messages up to a watermark",
        "tags": [
          "messages"
        ]
      }
    },
    "/notifications": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Any device can post to this path and it will get its own unique stream of notifications.  This REST route doesn&#39;t close and continues to stay open. The route also sends keep-alive messages approximately every five minutes. The keep-alive messages are \"\\r\\n\" characters. Notifications are JSON-formatted objects that are separated with \"\\r\\n\" characters. The notifications with the \"\\r\\n\" separators are delivered on one line to make it easier to parse. To get notifications for data, the device must have data.read capability on the device where the data resides. To receive notifications for updates to files, you must have the file.read\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/NotificationFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/Notification"
              },
              "type": "array"
            }
          }
        },
        "summary": "Register for a notification stream",
        "tags": [
          "notifications"
        ]
      }
    },
    "/orgs/{id}": {
      "get": {
        "description": "Retrieve the information of an organization. The capability organization.read is required to perform this action.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the organization to get information about.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Org"
            }
          }
        },
        "summary": "Retrieve the information of an organization",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{id}/caps": {
      "get": {
        "description": "Retrieve the list of capabilities. You can retrieve either the capabilities that this organization has on other entities, or the capabilities that other entities have been granted on this organization. Capabilities grant entities the permissions to perform certain actions on the system. The calling device must have the cap.read permission on the specified organization to perform this action.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the target organization.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of capability. You can use \"has\" to get the list capabilities the user has; or use \"grants\" to retrieve the list of capabilities that the user has granted to other entities.\n",
            "enum": [
              "has",
              "grants"
            ],
            "in": "query",
            "name": "cap_type",
            "type": "string"
          },
          {
            "description": "Organizations can inherit permissions from other entities, such as tags. Tags can be applied to the organization. If you specify 'inherit' as \"true\", all the capabilities are inherited through those entities.\n",
            "in": "query",
            "name": "inherit",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrgCapability"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the capabilities for an organization",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{id}/caps/{cap_name}/{granted_to}": {
      "delete": {
        "description": "Revoke a capability from an organization.  The cap.delete capability is required to perform this action.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the organization.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability to remove.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that had been granted the capability.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The association type for the created capability. The association type can be \"same_user\", which\n indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Revoke a capability from an organization",
        "tags": [
          "orgs"
        ]
      },
      "put": {
        "description": "Grant a capability to an entity. The created capability allows actions to be performed on the specified organization. Use this method to give permissions to other entities in the system to perform actions to the specified organization. The calling device must have the cap.create capability on the specified organization.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the organization.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity to grant the capability to.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of entity that&#39;s being granted the created capability. The types can be \"org\" (organizations), \"app\" (applications), \"device\" (devices), \"user\" (users), and \"tag\" (tags).\n",
            "enum": [
              "org",
              "app",
              "device",
              "user",
              "tag"
            ],
            "in": "query",
            "name": "granted_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The association type for the created capability. The association type can be \"same_user\", which\n indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "required": false,
            "type": "string"
          },
          {
            "description": "The timestamp that indicates when the capability expires. Timestamps are 64-bit integers that represents the number of milliseconds since UNIX epoch. This number cannot be greater than 8640000000000000 (Sat, 13 Sep 275760 00:00:00 GMT).\n",
            "format": "int64",
            "in": "query",
            "name": "expires_on",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Grants capability on an organization",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{id}/invite/{email}": {
      "put": {
        "description": "Add a user to an organization using their email. The calling device must have the user.add.org capability to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the organization.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The email address of the user to add to the specified organization.",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Add a user to an organization using their email",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{id}/tags/{tag_id}": {
      "delete": {
        "description": "Remove a tag from an organization.  To be able to call this method the calling device must have the organization.tag capability on the organization and the tag.grant capability on the tag.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the target organization.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the tag to remove.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Remove a tag from an organization",
        "tags": [
          "orgs"
        ]
      },
      "put": {
        "description": "Add a tag to an organization.  Tags can have permissions applied to them. Using a tag on an organization allows you to grant permissions to that organization. To be able to call this method, the calling device must have the organization.tag capability on the target organization and the tag.grant permission on the tag.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the target organization.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the tag to add.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Add a tag to an organization",
        "tags": [
          "orgs"
        ]
      }
    },
    "/orgs/{id}/users/{user_id}": {
      "delete": {
        "description": "Remove a user from an organization. The caller must have the user.remove.org capability to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the organization to remove the user from.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the user to remove from the organization.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Remove a user from an organization",
        "tags": [
          "orgs"
        ]
      },
      "put": {
        "description": "Organizations can have many users inside them. Organizations are created by one user who is automatically tagged as an administer for that new organization. That administrator can add more users using this method. Before a user can be added to an organization, the user must exist in the system. The caller must have the user.add.org capability to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the organization.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the user to add to the organization.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Add a user to an organization",
        "tags": [
          "orgs"
        ]
      }
    },
    "/search/{document}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Return the Elasticsearch results of the provided query. The available capabilities augment this query. For information about Elasticsearch queries, see the Elasticsearch documentation at: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html. To get results for your search, which  include devices, file metadata, or search data, you must grant the proper capability. You can grant the the search.device capability to allow information about devices to be searched, the search.file capability to allow file metadata to be searched, or the search.data capability to allow data that&#39;s saved on the platform by devices to be searched. For data, you can specify categories or specific data objects to limit what can be searched. For example, you can grant the search.data.default.alarm capability to permit only alarm categories to be searched.\n",
        "parameters": [
          {
            "description": "The indexed document type you want to search for.\n",
            "enum": [
              "device",
              "data",
              "data_ts",
              "alarm",
              "alarm_ts",
              "component",
              "compoent_ts",
              "log",
              "log_ts",
              "state",
              "state_ts",
              "file"
            ],
            "in": "path",
            "name": "document",
            "required": true,
            "type": "string"
          },
          {
            "description": "The number of results to provide.  Sometimes it is useful to specify zero, such as when you perform faceted searches and only the count of the search is required.\n",
            "in": "query",
            "name": "size",
            "type": "integer"
          },
          {
            "description": "Defines the offset from the first result you want to fetch.\n",
            "in": "query",
            "name": "from",
            "type": "integer"
          },
          {
            "description": "The comma-separated list of application universally unique identifiers (UUIDs). This list specifies the scope of the search. Only data for the specified applications are searched. This parameter helps to reduce the search time significantly. It&#39;s recommended that you know the applications to search before you use this method.\n",
            "in": "query",
            "name": "app_ids",
            "type": "string"
          },
          {
            "description": "A comma-separated list of organization universally unique identifiers (UUIDs). This list specifies the scope of the search. Only data for the specified organizations are searched. This parameter helps to reduce the search time significantly. It&#39;s recommended that you know the organizations to search before you use this method.\n",
            "in": "query",
            "name": "org_ids",
            "type": "string"
          },
          {
            "description": "The Elasticsearch DSL query to perform. For more information about DSL queries, see: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html\n",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ElasticDSL"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ElasticResult"
            }
          }
        },
        "summary": "Perform an Elasticsearch query for an item",
        "tags": [
          "search"
        ]
      }
    },
    "/tags": {
      "get": {
        "description": "Return a list of all the tags and the information for each tag. To get the list of tags, the caller must have the tag.read capability.\n",
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tag"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the available tags",
        "tags": [
          "tags"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a named exposing or non-exposing tag. Non-exposing tags can be granted capabilities to perform actions on other entities. When an entity is tagged with a non-exposing tag, the capabilities are transposed to the tagged entity. This transposition causes the tagged entity to be granted the same capabilities that were granted to the tag. Exposing tags work like non-exposing tags to grant capabilities on targets. In addition, exposing tags can be targets that grant capabilities to other entities. Therefore, any capabilities that were granted by an exposing tag, as well as any capabilities granted to the tag are transposed to the tagged entity. The effect of the transposition is that the tagged entity is granted the same capabilities that were granted to the tag and the tagged entity grants the same capabilities to other entities as the tag. To create a tag, the caller must have the tag.create capability.\n",
        "parameters": [
          {
            "description": "The JSON-formatted string containing information about the tag to create.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TagCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "summary": "Create a tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{id}": {
      "delete": {
        "description": "Delete a tag from the entity.  After the tag is deleted, the tag is removed from all entities that were assigned the removed tag. To delete a tag, the caller must have the tag.delete capability.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the tag to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Delete a tag",
        "tags": [
          "tags"
        ]
      },
      "get": {
        "description": "Read a particular tag by its universally unique identifier (UUID).  This method returns the information of a particular tag. To read a tag, the caller must have the tag.read capability.\n",
        "parameters": [
          {
            "description": "The UUID of the tag to read.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "summary": "Read a tag",
        "tags": [
          "tags"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a tag with new values. To update a tag, the caller must have the tag.update capability.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the tag to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The JSON-formatted string containing information to update the tag with.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TagUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/TagCapability"
            }
          }
        },
        "summary": "Update a tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{id}/caps": {
      "get": {
        "description": "Retrieve the list of capabilities. You can retrieve either capabilities that this tag has on other entities, or the capabilities that other entities have been granted on this tag. Capabilities grant entities the permissions to perform certain actions on the system. The calling device must have the cap.read permission on the specified application to perform this action.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the tag to list capabilities for.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "List the capabilities assigned to the tag. You can specify \"has\" to get all the capabilities that the specified tag has on other entities in the system. Otherwise, you can specify \"grants\", to get a list of all the capabilities that other entities have on this tag. If this parameter isn&#39;t provided, the value of \"grants\" is used.\n",
            "enum": [
              "has",
              "grants"
            ],
            "in": "query",
            "name": "cap_type",
            "type": "string"
          },
          {
            "description": "Whether to include the capabilities the specified tag inherits from a user or organization. When this parameter is set to true, the capabilities that are inherited and granted directly to the tag are returned in the response, otherwise, only the capabilities granted to the tag are returned.\n",
            "in": "query",
            "name": "inherit",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/TagCapability"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the capabilities assigned to a tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{id}/caps/{cap_name}/{granted_to}": {
      "delete": {
        "description": "Remove a capability from a tag. Entities that have been assigned the specified tag no longer have the specified capability. The calling device must have the cap.delete capability to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the tag from which to revoke a granted capability.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that has the grant.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The capability association type. The association type can be \"same_user\", which\n indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Revoke a capability from a tag",
        "tags": [
          "tags"
        ]
      },
      "put": {
        "description": "Grant a capability to another entity. The created capability allows actions to be performed on entities that are tagged with this tag. Use this method to give permissions to other entities in the system to perform actions to other entities tagged with this tag. The calling device must have the cap.create capability on the specified application and the tag must be an exposing tag. If you  use this call on a non-exposing tag, you get a 400 response code.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the tag to which to add the capability.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability to add.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that the capability is granted to.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of entity that&#39;s being granted the capability. The types can be \"org\" (organizations), \"app\" (applications), \"device\" (devices), \"user\" (users), and \"tag\" (tags).\n",
            "enum": [
              "org",
              "app",
              "device",
              "user",
              "tag"
            ],
            "in": "query",
            "name": "granted_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The capability association type. The association type can be \"same_user\", which\n indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "type": "string"
          },
          {
            "description": "The timestamp that indicates when the capability expires. Timestamps are 64-bit integers that represents the number of milliseconds since UNIX epoch. This number cannot be greater than 8640000000000000 (Sat, 13 Sep 275760 00:00:00 GMT).\n",
            "format": "int64",
            "in": "query",
            "name": "expires_on",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Grant a capability on a tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{id}/entities": {
      "get": {
        "description": "Retrieve the list of entities that are tagged with the specified tag.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the tag to list entities for.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/TagEntity"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve the list of entities that match a specified tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Provide a list of all users belonging to an organization.\n",
        "parameters": [
          {
            "description": "The UUID of the organization.",
            "in": "query",
            "name": "org_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve a list of users belonging to an organization",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Read a user using its universally unique identifier (UUID). The user.read capability is required to perform this action.\n",
        "parameters": [
          {
            "description": "The UUID of the user.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Read a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/caps": {
      "get": {
        "description": "Get the list of capabilities. You can retrieve either the capabilities that this user has on other entities, or the capabilities that other entities have been granted on this user. Devices that are associated with the user (i.e., the user logged into the device), inherit the capabilities when the device is granted the \"inherit_user\" (specified in \"scope\" parameter of the https://iot.blackberry.com/auth/dialog/authorize endpoint) during the authorization process. The cap.read capability is required to perform this operation.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the user.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of capability. You can use \"has\" to get the list capabilities that the user has or use \"grants\" to retrieve the list of capabilities that the user has granted to other entities.\n",
            "enum": [
              "has",
              "grants"
            ],
            "in": "query",
            "name": "cap_type",
            "type": "string"
          },
          {
            "description": "Applications inherit permissions from other entities, such as tags and organizations. Tags can be applied to the application and applications belong to an organization. If you specify 'inherit' as \"true\", all the capabilities are inherited through those entities.\n",
            "in": "query",
            "name": "inherit",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "items": {
                "$ref": "#/definitions/UserCapability"
              },
              "type": "array"
            }
          }
        },
        "summary": "List the capabilities of a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/caps/{cap_name}/{granted_to}": {
      "delete": {
        "description": "Revoke a capability from a user.  The cap.delete capability is required to perform this action.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the user.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability to remove.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that had been granted the capability.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The capability association type. The association type can be \"same_user\", which\n indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Revoke a capability from a user",
        "tags": [
          "users"
        ]
      },
      "put": {
        "description": "Grant a capability to an entity. The created capability allows actions to be performed on the specified user. Use this method to give permissions to other entities in the system to perform actions to the specified user. The calling device must have the cap.create capability on the specified user.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the user.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the capability to add.",
            "in": "path",
            "name": "cap_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the entity that has been granted a capability.",
            "in": "path",
            "name": "granted_to",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of entity that&#39;s being granted the capability. The types can be \"org\" (organizations), \"app\" (applications), \"device\" (devices), \"user\" (users), and \"tag\" (tags).\n",
            "enum": [
              "org",
              "app",
              "device",
              "user",
              "tag"
            ],
            "in": "query",
            "name": "granted_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The association type for the created capability. The association type can be \"same_user\", which\n indicates to grant the capability to devices that belong to the same user.\n",
            "enum": [
              "same_user"
            ],
            "in": "query",
            "name": "association",
            "required": false,
            "type": "string"
          },
          {
            "description": "The timestamp that indicates when the capability expires. Timestamps are 64-bit integers that represents the number of milliseconds since UNIX epoch. This number cannot be greater than 8640000000000000 (Sat, 13 Sep 275760 00:00:00 GMT).\n",
            "format": "int64",
            "in": "query",
            "name": "expires_on",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/UserCapability"
            }
          }
        },
        "summary": "Grant a capability on a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/profile": {
      "get": {
        "description": "Read a user&#39;s profile information. The user.read.profile capability is required to perform this action.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the user.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        },
        "summary": "Read a user's profile",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/tags/{tag_id}": {
      "delete": {
        "description": "Remove a tag from a user. The calling device must have the user.untag capability for the specified user and the tag.grant capability for the specified tag.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the user.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the tag to remove.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Remove a tag from a user",
        "tags": [
          "users"
        ]
      },
      "put": {
        "description": "Add a tag to a user. The calling device must have the user.tag capability for the specified user and the tag.grant capability for the specified tag.\n",
        "parameters": [
          {
            "description": "The universally unique identifier (UUID) of the user.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The UUID of the tag to add.",
            "in": "path",
            "name": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "summary": "Add a tag to a user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/id/{email}": {
      "get": {
        "description": "Get the user id in the format of universally unique identifier (UUID) by providing the user email address.\n",
        "parameters": [
          {
            "description": "The email address of the user.",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Get the user id",
        "tags": [
          "users"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "tags": [
    {
      "name": "apps"
    },
    {
      "name": "caps"
    },
    {
      "name": "devices"
    },
    {
      "name": "firehoses"
    },
    {
      "name": "messages"
    },
    {
      "name": "files"
    },
    {
      "name": "notifications"
    },
    {
      "name": "orgs"
    },
    {
      "name": "search"
    },
    {
      "name": "tags"
    },
    {
      "name": "users"
    }
  ]
}
